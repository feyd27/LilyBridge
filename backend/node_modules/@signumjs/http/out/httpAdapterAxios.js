"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.HttpAdapterAxios = void 0;
const axios_1 = __importDefault(require("axios"));
const httpResponse_1 = require("./httpResponse");
const httpError_1 = require("./httpError");
const DefaultAxiosOptions = {};
/**
 * Http Implementation of {@link Http} using https://github.com/axios/axios
 *
 * Prefer {@link HttpClientFactory.createHttpClient} to create an instance
 *
 * @module http
 */
class HttpAdapterAxios {
    _clientImpl;
    /**
     * Creates your Http client
     * @param baseURL The baseUrl, i.e host url
     * @param options [optional] An options/configurations object applied to all requests
     * The current implementation uses axios, so the options can be found here
     * [Axios Configuration](https://github.com/axios/axios#request-config)
     */
    constructor(baseURL, options = DefaultAxiosOptions) {
        // see https://github.com/axios/axios#request-config for more
        this._clientImpl = axios_1.default.create({
            baseURL,
            ...options
        });
    }
    /**
     * @internal
     * @param url The url
     * @param error The returned error
     */
    static mountError(url, error) {
        if (error.response) {
            return new httpError_1.HttpError(url, error.response.status, error.response.statusText, error.response.data);
        }
        else if (error.message) {
            return new httpError_1.HttpError(url, 0, 'Request failed', error.message);
        }
        else if (error.request) {
            return new httpError_1.HttpError(url, 0, 'Request failed', error.request);
        }
        return new httpError_1.HttpError(url, -1, 'Http Configuration error', null);
    }
    async get(url, options) {
        try {
            const { status, data } = await this._clientImpl.get(url, options);
            return new httpResponse_1.HttpResponse(status, data);
        }
        catch (error) {
            throw HttpAdapterAxios.mountError(url, error);
        }
    }
    async post(url, payload, options) {
        try {
            const { status, data } = await this._clientImpl.post(url, payload, options);
            return new httpResponse_1.HttpResponse(status, data);
        }
        catch (error) {
            throw HttpAdapterAxios.mountError(url, error);
        }
    }
    async put(url, payload, options) {
        try {
            const { status, data } = await this._clientImpl.put(url, payload, options);
            return new httpResponse_1.HttpResponse(status, data);
        }
        catch (error) {
            throw HttpAdapterAxios.mountError(url, error);
        }
    }
    async delete(url, options) {
        try {
            const { status, data } = await this._clientImpl.delete(url, options);
            return new httpResponse_1.HttpResponse(status, data);
        }
        catch (error) {
            throw HttpAdapterAxios.mountError(url, error);
        }
    }
}
exports.HttpAdapterAxios = HttpAdapterAxios;
//# sourceMappingURL=httpAdapterAxios.js.map