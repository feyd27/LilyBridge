{
  "version": 3,
  "sources": ["../../../node_modules/bignumber.js/bignumber.js", "../src/chainValue.ts", "../src/constants.ts", "../src/amount.ts", "../src/index.ts", "../src/asyncRetry.ts", "../src/chainTime.ts", "../../../node_modules/bignumber.js/bignumber.mjs", "../src/convertBase36StringToHexString.ts", "../../../node_modules/js-base64/base64.mjs", "../src/convertBase64StringToString.ts", "../src/convertByteArrayToHexString.ts", "../src/convertByteArrayToString.ts", "../src/internal/padStartPolyfill.ts", "../src/internal/twosComplementBinary.ts", "../src/convertDecStringToHexString.ts", "../src/convertHexEndianess.ts", "../src/convertHexStringToBase36String.ts", "../src/convertHexStringToByteArray.ts", "../src/convertHexStringToDecString.ts", "../src/convertHexStringToString.ts", "../src/convertStringToBase64String.ts", "../src/convertStringToByteArray.ts", "../src/convertStringToHexString.ts", "../src/convertAssetPriceToPlanck.ts", "../src/convertPlanckToAssetPrice.ts"],
  "sourcesContent": [";(function (globalObject) {\r\n  'use strict';\r\n\r\n/*\r\n *      bignumber.js v9.1.2\r\n *      A JavaScript library for arbitrary-precision arithmetic.\r\n *      https://github.com/MikeMcl/bignumber.js\r\n *      Copyright (c) 2022 Michael Mclaughlin <M8ch88l@gmail.com>\r\n *      MIT Licensed.\r\n *\r\n *      BigNumber.prototype methods     |  BigNumber methods\r\n *                                      |\r\n *      absoluteValue            abs    |  clone\r\n *      comparedTo                      |  config               set\r\n *      decimalPlaces            dp     |      DECIMAL_PLACES\r\n *      dividedBy                div    |      ROUNDING_MODE\r\n *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT\r\n *      exponentiatedBy          pow    |      RANGE\r\n *      integerValue                    |      CRYPTO\r\n *      isEqualTo                eq     |      MODULO_MODE\r\n *      isFinite                        |      POW_PRECISION\r\n *      isGreaterThan            gt     |      FORMAT\r\n *      isGreaterThanOrEqualTo   gte    |      ALPHABET\r\n *      isInteger                       |  isBigNumber\r\n *      isLessThan               lt     |  maximum              max\r\n *      isLessThanOrEqualTo      lte    |  minimum              min\r\n *      isNaN                           |  random\r\n *      isNegative                      |  sum\r\n *      isPositive                      |\r\n *      isZero                          |\r\n *      minus                           |\r\n *      modulo                   mod    |\r\n *      multipliedBy             times  |\r\n *      negated                         |\r\n *      plus                            |\r\n *      precision                sd     |\r\n *      shiftedBy                       |\r\n *      squareRoot               sqrt   |\r\n *      toExponential                   |\r\n *      toFixed                         |\r\n *      toFormat                        |\r\n *      toFraction                      |\r\n *      toJSON                          |\r\n *      toNumber                        |\r\n *      toPrecision                     |\r\n *      toString                        |\r\n *      valueOf                         |\r\n *\r\n */\r\n\r\n\r\n  var BigNumber,\r\n    isNumeric = /^-?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?$/i,\r\n    mathceil = Math.ceil,\r\n    mathfloor = Math.floor,\r\n\r\n    bignumberError = '[BigNumber Error] ',\r\n    tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ',\r\n\r\n    BASE = 1e14,\r\n    LOG_BASE = 14,\r\n    MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1\r\n    // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1\r\n    POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],\r\n    SQRT_BASE = 1e7,\r\n\r\n    // EDITABLE\r\n    // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and\r\n    // the arguments to toExponential, toFixed, toFormat, and toPrecision.\r\n    MAX = 1E9;                                   // 0 to MAX_INT32\r\n\r\n\r\n  /*\r\n   * Create and return a BigNumber constructor.\r\n   */\r\n  function clone(configObject) {\r\n    var div, convertBase, parseNumeric,\r\n      P = BigNumber.prototype = { constructor: BigNumber, toString: null, valueOf: null },\r\n      ONE = new BigNumber(1),\r\n\r\n\r\n      //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------\r\n\r\n\r\n      // The default values below must be integers within the inclusive ranges stated.\r\n      // The values can also be changed at run-time using BigNumber.set.\r\n\r\n      // The maximum number of decimal places for operations involving division.\r\n      DECIMAL_PLACES = 20,                     // 0 to MAX\r\n\r\n      // The rounding mode used when rounding to the above decimal places, and when using\r\n      // toExponential, toFixed, toFormat and toPrecision, and round (default value).\r\n      // UP         0 Away from zero.\r\n      // DOWN       1 Towards zero.\r\n      // CEIL       2 Towards +Infinity.\r\n      // FLOOR      3 Towards -Infinity.\r\n      // HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n      // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n      // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n      // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n      // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n      ROUNDING_MODE = 4,                       // 0 to 8\r\n\r\n      // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]\r\n\r\n      // The exponent value at and beneath which toString returns exponential notation.\r\n      // Number type: -7\r\n      TO_EXP_NEG = -7,                         // 0 to -MAX\r\n\r\n      // The exponent value at and above which toString returns exponential notation.\r\n      // Number type: 21\r\n      TO_EXP_POS = 21,                         // 0 to MAX\r\n\r\n      // RANGE : [MIN_EXP, MAX_EXP]\r\n\r\n      // The minimum exponent value, beneath which underflow to zero occurs.\r\n      // Number type: -324  (5e-324)\r\n      MIN_EXP = -1e7,                          // -1 to -MAX\r\n\r\n      // The maximum exponent value, above which overflow to Infinity occurs.\r\n      // Number type:  308  (1.7976931348623157e+308)\r\n      // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.\r\n      MAX_EXP = 1e7,                           // 1 to MAX\r\n\r\n      // Whether to use cryptographically-secure random number generation, if available.\r\n      CRYPTO = false,                          // true or false\r\n\r\n      // The modulo mode used when calculating the modulus: a mod n.\r\n      // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\r\n      // The remainder (r) is calculated as: r = a - n * q.\r\n      //\r\n      // UP        0 The remainder is positive if the dividend is negative, else is negative.\r\n      // DOWN      1 The remainder has the same sign as the dividend.\r\n      //             This modulo mode is commonly known as 'truncated division' and is\r\n      //             equivalent to (a % n) in JavaScript.\r\n      // FLOOR     3 The remainder has the same sign as the divisor (Python %).\r\n      // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.\r\n      // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).\r\n      //             The remainder is always positive.\r\n      //\r\n      // The truncated division, floored division, Euclidian division and IEEE 754 remainder\r\n      // modes are commonly used for the modulus operation.\r\n      // Although the other rounding modes can also be used, they may not give useful results.\r\n      MODULO_MODE = 1,                         // 0 to 9\r\n\r\n      // The maximum number of significant digits of the result of the exponentiatedBy operation.\r\n      // If POW_PRECISION is 0, there will be unlimited significant digits.\r\n      POW_PRECISION = 0,                       // 0 to MAX\r\n\r\n      // The format specification used by the BigNumber.prototype.toFormat method.\r\n      FORMAT = {\r\n        prefix: '',\r\n        groupSize: 3,\r\n        secondaryGroupSize: 0,\r\n        groupSeparator: ',',\r\n        decimalSeparator: '.',\r\n        fractionGroupSize: 0,\r\n        fractionGroupSeparator: '\\xA0',        // non-breaking space\r\n        suffix: ''\r\n      },\r\n\r\n      // The alphabet used for base conversion. It must be at least 2 characters long, with no '+',\r\n      // '-', '.', whitespace, or repeated character.\r\n      // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'\r\n      ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz',\r\n      alphabetHasNormalDecimalDigits = true;\r\n\r\n\r\n    //------------------------------------------------------------------------------------------\r\n\r\n\r\n    // CONSTRUCTOR\r\n\r\n\r\n    /*\r\n     * The BigNumber constructor and exported function.\r\n     * Create and return a new instance of a BigNumber object.\r\n     *\r\n     * v {number|string|BigNumber} A numeric value.\r\n     * [b] {number} The base of v. Integer, 2 to ALPHABET.length inclusive.\r\n     */\r\n    function BigNumber(v, b) {\r\n      var alphabet, c, caseChanged, e, i, isNum, len, str,\r\n        x = this;\r\n\r\n      // Enable constructor call without `new`.\r\n      if (!(x instanceof BigNumber)) return new BigNumber(v, b);\r\n\r\n      if (b == null) {\r\n\r\n        if (v && v._isBigNumber === true) {\r\n          x.s = v.s;\r\n\r\n          if (!v.c || v.e > MAX_EXP) {\r\n            x.c = x.e = null;\r\n          } else if (v.e < MIN_EXP) {\r\n            x.c = [x.e = 0];\r\n          } else {\r\n            x.e = v.e;\r\n            x.c = v.c.slice();\r\n          }\r\n\r\n          return;\r\n        }\r\n\r\n        if ((isNum = typeof v == 'number') && v * 0 == 0) {\r\n\r\n          // Use `1 / n` to handle minus zero also.\r\n          x.s = 1 / v < 0 ? (v = -v, -1) : 1;\r\n\r\n          // Fast path for integers, where n < 2147483648 (2**31).\r\n          if (v === ~~v) {\r\n            for (e = 0, i = v; i >= 10; i /= 10, e++);\r\n\r\n            if (e > MAX_EXP) {\r\n              x.c = x.e = null;\r\n            } else {\r\n              x.e = e;\r\n              x.c = [v];\r\n            }\r\n\r\n            return;\r\n          }\r\n\r\n          str = String(v);\r\n        } else {\r\n\r\n          if (!isNumeric.test(str = String(v))) return parseNumeric(x, str, isNum);\r\n\r\n          x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;\r\n        }\r\n\r\n        // Decimal point?\r\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n\r\n        // Exponential form?\r\n        if ((i = str.search(/e/i)) > 0) {\r\n\r\n          // Determine exponent.\r\n          if (e < 0) e = i;\r\n          e += +str.slice(i + 1);\r\n          str = str.substring(0, i);\r\n        } else if (e < 0) {\r\n\r\n          // Integer.\r\n          e = str.length;\r\n        }\r\n\r\n      } else {\r\n\r\n        // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n        intCheck(b, 2, ALPHABET.length, 'Base');\r\n\r\n        // Allow exponential notation to be used with base 10 argument, while\r\n        // also rounding to DECIMAL_PLACES as with other bases.\r\n        if (b == 10 && alphabetHasNormalDecimalDigits) {\r\n          x = new BigNumber(v);\r\n          return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);\r\n        }\r\n\r\n        str = String(v);\r\n\r\n        if (isNum = typeof v == 'number') {\r\n\r\n          // Avoid potential interpretation of Infinity and NaN as base 44+ values.\r\n          if (v * 0 != 0) return parseNumeric(x, str, isNum, b);\r\n\r\n          x.s = 1 / v < 0 ? (str = str.slice(1), -1) : 1;\r\n\r\n          // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n          if (BigNumber.DEBUG && str.replace(/^0\\.0*|\\./, '').length > 15) {\r\n            throw Error\r\n             (tooManyDigits + v);\r\n          }\r\n        } else {\r\n          x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;\r\n        }\r\n\r\n        alphabet = ALPHABET.slice(0, b);\r\n        e = i = 0;\r\n\r\n        // Check that str is a valid base b number.\r\n        // Don't use RegExp, so alphabet can contain special characters.\r\n        for (len = str.length; i < len; i++) {\r\n          if (alphabet.indexOf(c = str.charAt(i)) < 0) {\r\n            if (c == '.') {\r\n\r\n              // If '.' is not the first character and it has not be found before.\r\n              if (i > e) {\r\n                e = len;\r\n                continue;\r\n              }\r\n            } else if (!caseChanged) {\r\n\r\n              // Allow e.g. hexadecimal 'FF' as well as 'ff'.\r\n              if (str == str.toUpperCase() && (str = str.toLowerCase()) ||\r\n                  str == str.toLowerCase() && (str = str.toUpperCase())) {\r\n                caseChanged = true;\r\n                i = -1;\r\n                e = 0;\r\n                continue;\r\n              }\r\n            }\r\n\r\n            return parseNumeric(x, String(v), isNum, b);\r\n          }\r\n        }\r\n\r\n        // Prevent later check for length on converted number.\r\n        isNum = false;\r\n        str = convertBase(str, b, 10, x.s);\r\n\r\n        // Decimal point?\r\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n        else e = str.length;\r\n      }\r\n\r\n      // Determine leading zeros.\r\n      for (i = 0; str.charCodeAt(i) === 48; i++);\r\n\r\n      // Determine trailing zeros.\r\n      for (len = str.length; str.charCodeAt(--len) === 48;);\r\n\r\n      if (str = str.slice(i, ++len)) {\r\n        len -= i;\r\n\r\n        // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n        if (isNum && BigNumber.DEBUG &&\r\n          len > 15 && (v > MAX_SAFE_INTEGER || v !== mathfloor(v))) {\r\n            throw Error\r\n             (tooManyDigits + (x.s * v));\r\n        }\r\n\r\n         // Overflow?\r\n        if ((e = e - i - 1) > MAX_EXP) {\r\n\r\n          // Infinity.\r\n          x.c = x.e = null;\r\n\r\n        // Underflow?\r\n        } else if (e < MIN_EXP) {\r\n\r\n          // Zero.\r\n          x.c = [x.e = 0];\r\n        } else {\r\n          x.e = e;\r\n          x.c = [];\r\n\r\n          // Transform base\r\n\r\n          // e is the base 10 exponent.\r\n          // i is where to slice str to get the first element of the coefficient array.\r\n          i = (e + 1) % LOG_BASE;\r\n          if (e < 0) i += LOG_BASE;  // i < 1\r\n\r\n          if (i < len) {\r\n            if (i) x.c.push(+str.slice(0, i));\r\n\r\n            for (len -= LOG_BASE; i < len;) {\r\n              x.c.push(+str.slice(i, i += LOG_BASE));\r\n            }\r\n\r\n            i = LOG_BASE - (str = str.slice(i)).length;\r\n          } else {\r\n            i -= len;\r\n          }\r\n\r\n          for (; i--; str += '0');\r\n          x.c.push(+str);\r\n        }\r\n      } else {\r\n\r\n        // Zero.\r\n        x.c = [x.e = 0];\r\n      }\r\n    }\r\n\r\n\r\n    // CONSTRUCTOR PROPERTIES\r\n\r\n\r\n    BigNumber.clone = clone;\r\n\r\n    BigNumber.ROUND_UP = 0;\r\n    BigNumber.ROUND_DOWN = 1;\r\n    BigNumber.ROUND_CEIL = 2;\r\n    BigNumber.ROUND_FLOOR = 3;\r\n    BigNumber.ROUND_HALF_UP = 4;\r\n    BigNumber.ROUND_HALF_DOWN = 5;\r\n    BigNumber.ROUND_HALF_EVEN = 6;\r\n    BigNumber.ROUND_HALF_CEIL = 7;\r\n    BigNumber.ROUND_HALF_FLOOR = 8;\r\n    BigNumber.EUCLID = 9;\r\n\r\n\r\n    /*\r\n     * Configure infrequently-changing library-wide settings.\r\n     *\r\n     * Accept an object with the following optional properties (if the value of a property is\r\n     * a number, it must be an integer within the inclusive range stated):\r\n     *\r\n     *   DECIMAL_PLACES   {number}           0 to MAX\r\n     *   ROUNDING_MODE    {number}           0 to 8\r\n     *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]\r\n     *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]\r\n     *   CRYPTO           {boolean}          true or false\r\n     *   MODULO_MODE      {number}           0 to 9\r\n     *   POW_PRECISION       {number}           0 to MAX\r\n     *   ALPHABET         {string}           A string of two or more unique characters which does\r\n     *                                       not contain '.'.\r\n     *   FORMAT           {object}           An object with some of the following properties:\r\n     *     prefix                 {string}\r\n     *     groupSize              {number}\r\n     *     secondaryGroupSize     {number}\r\n     *     groupSeparator         {string}\r\n     *     decimalSeparator       {string}\r\n     *     fractionGroupSize      {number}\r\n     *     fractionGroupSeparator {string}\r\n     *     suffix                 {string}\r\n     *\r\n     * (The values assigned to the above FORMAT object properties are not checked for validity.)\r\n     *\r\n     * E.g.\r\n     * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })\r\n     *\r\n     * Ignore properties/parameters set to null or undefined, except for ALPHABET.\r\n     *\r\n     * Return an object with the properties current values.\r\n     */\r\n    BigNumber.config = BigNumber.set = function (obj) {\r\n      var p, v;\r\n\r\n      if (obj != null) {\r\n\r\n        if (typeof obj == 'object') {\r\n\r\n          // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.\r\n          // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, MAX, p);\r\n            DECIMAL_PLACES = v;\r\n          }\r\n\r\n          // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.\r\n          // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, 8, p);\r\n            ROUNDING_MODE = v;\r\n          }\r\n\r\n          // EXPONENTIAL_AT {number|number[]}\r\n          // Integer, -MAX to MAX inclusive or\r\n          // [integer -MAX to 0 inclusive, 0 to MAX inclusive].\r\n          // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {\r\n            v = obj[p];\r\n            if (v && v.pop) {\r\n              intCheck(v[0], -MAX, 0, p);\r\n              intCheck(v[1], 0, MAX, p);\r\n              TO_EXP_NEG = v[0];\r\n              TO_EXP_POS = v[1];\r\n            } else {\r\n              intCheck(v, -MAX, MAX, p);\r\n              TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);\r\n            }\r\n          }\r\n\r\n          // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or\r\n          // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].\r\n          // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'\r\n          if (obj.hasOwnProperty(p = 'RANGE')) {\r\n            v = obj[p];\r\n            if (v && v.pop) {\r\n              intCheck(v[0], -MAX, -1, p);\r\n              intCheck(v[1], 1, MAX, p);\r\n              MIN_EXP = v[0];\r\n              MAX_EXP = v[1];\r\n            } else {\r\n              intCheck(v, -MAX, MAX, p);\r\n              if (v) {\r\n                MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);\r\n              } else {\r\n                throw Error\r\n                 (bignumberError + p + ' cannot be zero: ' + v);\r\n              }\r\n            }\r\n          }\r\n\r\n          // CRYPTO {boolean} true or false.\r\n          // '[BigNumber Error] CRYPTO not true or false: {v}'\r\n          // '[BigNumber Error] crypto unavailable'\r\n          if (obj.hasOwnProperty(p = 'CRYPTO')) {\r\n            v = obj[p];\r\n            if (v === !!v) {\r\n              if (v) {\r\n                if (typeof crypto != 'undefined' && crypto &&\r\n                 (crypto.getRandomValues || crypto.randomBytes)) {\r\n                  CRYPTO = v;\r\n                } else {\r\n                  CRYPTO = !v;\r\n                  throw Error\r\n                   (bignumberError + 'crypto unavailable');\r\n                }\r\n              } else {\r\n                CRYPTO = v;\r\n              }\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' not true or false: ' + v);\r\n            }\r\n          }\r\n\r\n          // MODULO_MODE {number} Integer, 0 to 9 inclusive.\r\n          // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'MODULO_MODE')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, 9, p);\r\n            MODULO_MODE = v;\r\n          }\r\n\r\n          // POW_PRECISION {number} Integer, 0 to MAX inclusive.\r\n          // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'POW_PRECISION')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, MAX, p);\r\n            POW_PRECISION = v;\r\n          }\r\n\r\n          // FORMAT {object}\r\n          // '[BigNumber Error] FORMAT not an object: {v}'\r\n          if (obj.hasOwnProperty(p = 'FORMAT')) {\r\n            v = obj[p];\r\n            if (typeof v == 'object') FORMAT = v;\r\n            else throw Error\r\n             (bignumberError + p + ' not an object: ' + v);\r\n          }\r\n\r\n          // ALPHABET {string}\r\n          // '[BigNumber Error] ALPHABET invalid: {v}'\r\n          if (obj.hasOwnProperty(p = 'ALPHABET')) {\r\n            v = obj[p];\r\n\r\n            // Disallow if less than two characters,\r\n            // or if it contains '+', '-', '.', whitespace, or a repeated character.\r\n            if (typeof v == 'string' && !/^.?$|[+\\-.\\s]|(.).*\\1/.test(v)) {\r\n              alphabetHasNormalDecimalDigits = v.slice(0, 10) == '0123456789';\r\n              ALPHABET = v;\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' invalid: ' + v);\r\n            }\r\n          }\r\n\r\n        } else {\r\n\r\n          // '[BigNumber Error] Object expected: {v}'\r\n          throw Error\r\n           (bignumberError + 'Object expected: ' + obj);\r\n        }\r\n      }\r\n\r\n      return {\r\n        DECIMAL_PLACES: DECIMAL_PLACES,\r\n        ROUNDING_MODE: ROUNDING_MODE,\r\n        EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],\r\n        RANGE: [MIN_EXP, MAX_EXP],\r\n        CRYPTO: CRYPTO,\r\n        MODULO_MODE: MODULO_MODE,\r\n        POW_PRECISION: POW_PRECISION,\r\n        FORMAT: FORMAT,\r\n        ALPHABET: ALPHABET\r\n      };\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if v is a BigNumber instance, otherwise return false.\r\n     *\r\n     * If BigNumber.DEBUG is true, throw if a BigNumber instance is not well-formed.\r\n     *\r\n     * v {any}\r\n     *\r\n     * '[BigNumber Error] Invalid BigNumber: {v}'\r\n     */\r\n    BigNumber.isBigNumber = function (v) {\r\n      if (!v || v._isBigNumber !== true) return false;\r\n      if (!BigNumber.DEBUG) return true;\r\n\r\n      var i, n,\r\n        c = v.c,\r\n        e = v.e,\r\n        s = v.s;\r\n\r\n      out: if ({}.toString.call(c) == '[object Array]') {\r\n\r\n        if ((s === 1 || s === -1) && e >= -MAX && e <= MAX && e === mathfloor(e)) {\r\n\r\n          // If the first element is zero, the BigNumber value must be zero.\r\n          if (c[0] === 0) {\r\n            if (e === 0 && c.length === 1) return true;\r\n            break out;\r\n          }\r\n\r\n          // Calculate number of digits that c[0] should have, based on the exponent.\r\n          i = (e + 1) % LOG_BASE;\r\n          if (i < 1) i += LOG_BASE;\r\n\r\n          // Calculate number of digits of c[0].\r\n          //if (Math.ceil(Math.log(c[0] + 1) / Math.LN10) == i) {\r\n          if (String(c[0]).length == i) {\r\n\r\n            for (i = 0; i < c.length; i++) {\r\n              n = c[i];\r\n              if (n < 0 || n >= BASE || n !== mathfloor(n)) break out;\r\n            }\r\n\r\n            // Last element cannot be zero, unless it is the only element.\r\n            if (n !== 0) return true;\r\n          }\r\n        }\r\n\r\n      // Infinity/NaN\r\n      } else if (c === null && e === null && (s === null || s === 1 || s === -1)) {\r\n        return true;\r\n      }\r\n\r\n      throw Error\r\n        (bignumberError + 'Invalid BigNumber: ' + v);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the maximum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.maximum = BigNumber.max = function () {\r\n      return maxOrMin(arguments, -1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the minimum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.minimum = BigNumber.min = function () {\r\n      return maxOrMin(arguments, 1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,\r\n     * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing\r\n     * zeros are produced).\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'\r\n     * '[BigNumber Error] crypto unavailable'\r\n     */\r\n    BigNumber.random = (function () {\r\n      var pow2_53 = 0x20000000000000;\r\n\r\n      // Return a 53 bit integer n, where 0 <= n < 9007199254740992.\r\n      // Check if Math.random() produces more than 32 bits of randomness.\r\n      // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.\r\n      // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.\r\n      var random53bitInt = (Math.random() * pow2_53) & 0x1fffff\r\n       ? function () { return mathfloor(Math.random() * pow2_53); }\r\n       : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +\r\n         (Math.random() * 0x800000 | 0); };\r\n\r\n      return function (dp) {\r\n        var a, b, e, k, v,\r\n          i = 0,\r\n          c = [],\r\n          rand = new BigNumber(ONE);\r\n\r\n        if (dp == null) dp = DECIMAL_PLACES;\r\n        else intCheck(dp, 0, MAX);\r\n\r\n        k = mathceil(dp / LOG_BASE);\r\n\r\n        if (CRYPTO) {\r\n\r\n          // Browsers supporting crypto.getRandomValues.\r\n          if (crypto.getRandomValues) {\r\n\r\n            a = crypto.getRandomValues(new Uint32Array(k *= 2));\r\n\r\n            for (; i < k;) {\r\n\r\n              // 53 bits:\r\n              // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)\r\n              // 11111 11111111 11111111 11111111 11100000 00000000 00000000\r\n              // ((Math.pow(2, 32) - 1) >>> 11).toString(2)\r\n              //                                     11111 11111111 11111111\r\n              // 0x20000 is 2^21.\r\n              v = a[i] * 0x20000 + (a[i + 1] >>> 11);\r\n\r\n              // Rejection sampling:\r\n              // 0 <= v < 9007199254740992\r\n              // Probability that v >= 9e15, is\r\n              // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251\r\n              if (v >= 9e15) {\r\n                b = crypto.getRandomValues(new Uint32Array(2));\r\n                a[i] = b[0];\r\n                a[i + 1] = b[1];\r\n              } else {\r\n\r\n                // 0 <= v <= 8999999999999999\r\n                // 0 <= (v % 1e14) <= 99999999999999\r\n                c.push(v % 1e14);\r\n                i += 2;\r\n              }\r\n            }\r\n            i = k / 2;\r\n\r\n          // Node.js supporting crypto.randomBytes.\r\n          } else if (crypto.randomBytes) {\r\n\r\n            // buffer\r\n            a = crypto.randomBytes(k *= 7);\r\n\r\n            for (; i < k;) {\r\n\r\n              // 0x1000000000000 is 2^48, 0x10000000000 is 2^40\r\n              // 0x100000000 is 2^32, 0x1000000 is 2^24\r\n              // 11111 11111111 11111111 11111111 11111111 11111111 11111111\r\n              // 0 <= v < 9007199254740992\r\n              v = ((a[i] & 31) * 0x1000000000000) + (a[i + 1] * 0x10000000000) +\r\n                 (a[i + 2] * 0x100000000) + (a[i + 3] * 0x1000000) +\r\n                 (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];\r\n\r\n              if (v >= 9e15) {\r\n                crypto.randomBytes(7).copy(a, i);\r\n              } else {\r\n\r\n                // 0 <= (v % 1e14) <= 99999999999999\r\n                c.push(v % 1e14);\r\n                i += 7;\r\n              }\r\n            }\r\n            i = k / 7;\r\n          } else {\r\n            CRYPTO = false;\r\n            throw Error\r\n             (bignumberError + 'crypto unavailable');\r\n          }\r\n        }\r\n\r\n        // Use Math.random.\r\n        if (!CRYPTO) {\r\n\r\n          for (; i < k;) {\r\n            v = random53bitInt();\r\n            if (v < 9e15) c[i++] = v % 1e14;\r\n          }\r\n        }\r\n\r\n        k = c[--i];\r\n        dp %= LOG_BASE;\r\n\r\n        // Convert trailing digits to zeros according to dp.\r\n        if (k && dp) {\r\n          v = POWS_TEN[LOG_BASE - dp];\r\n          c[i] = mathfloor(k / v) * v;\r\n        }\r\n\r\n        // Remove trailing elements which are zero.\r\n        for (; c[i] === 0; c.pop(), i--);\r\n\r\n        // Zero?\r\n        if (i < 0) {\r\n          c = [e = 0];\r\n        } else {\r\n\r\n          // Remove leading elements which are zero and adjust exponent accordingly.\r\n          for (e = -1 ; c[0] === 0; c.splice(0, 1), e -= LOG_BASE);\r\n\r\n          // Count the digits of the first element of c to determine leading zeros, and...\r\n          for (i = 1, v = c[0]; v >= 10; v /= 10, i++);\r\n\r\n          // adjust the exponent accordingly.\r\n          if (i < LOG_BASE) e -= LOG_BASE - i;\r\n        }\r\n\r\n        rand.e = e;\r\n        rand.c = c;\r\n        return rand;\r\n      };\r\n    })();\r\n\r\n\r\n    /*\r\n     * Return a BigNumber whose value is the sum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.sum = function () {\r\n      var i = 1,\r\n        args = arguments,\r\n        sum = new BigNumber(args[0]);\r\n      for (; i < args.length;) sum = sum.plus(args[i++]);\r\n      return sum;\r\n    };\r\n\r\n\r\n    // PRIVATE FUNCTIONS\r\n\r\n\r\n    // Called by BigNumber and BigNumber.prototype.toString.\r\n    convertBase = (function () {\r\n      var decimal = '0123456789';\r\n\r\n      /*\r\n       * Convert string of baseIn to an array of numbers of baseOut.\r\n       * Eg. toBaseOut('255', 10, 16) returns [15, 15].\r\n       * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].\r\n       */\r\n      function toBaseOut(str, baseIn, baseOut, alphabet) {\r\n        var j,\r\n          arr = [0],\r\n          arrL,\r\n          i = 0,\r\n          len = str.length;\r\n\r\n        for (; i < len;) {\r\n          for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);\r\n\r\n          arr[0] += alphabet.indexOf(str.charAt(i++));\r\n\r\n          for (j = 0; j < arr.length; j++) {\r\n\r\n            if (arr[j] > baseOut - 1) {\r\n              if (arr[j + 1] == null) arr[j + 1] = 0;\r\n              arr[j + 1] += arr[j] / baseOut | 0;\r\n              arr[j] %= baseOut;\r\n            }\r\n          }\r\n        }\r\n\r\n        return arr.reverse();\r\n      }\r\n\r\n      // Convert a numeric string of baseIn to a numeric string of baseOut.\r\n      // If the caller is toString, we are converting from base 10 to baseOut.\r\n      // If the caller is BigNumber, we are converting from baseIn to base 10.\r\n      return function (str, baseIn, baseOut, sign, callerIsToString) {\r\n        var alphabet, d, e, k, r, x, xc, y,\r\n          i = str.indexOf('.'),\r\n          dp = DECIMAL_PLACES,\r\n          rm = ROUNDING_MODE;\r\n\r\n        // Non-integer.\r\n        if (i >= 0) {\r\n          k = POW_PRECISION;\r\n\r\n          // Unlimited precision.\r\n          POW_PRECISION = 0;\r\n          str = str.replace('.', '');\r\n          y = new BigNumber(baseIn);\r\n          x = y.pow(str.length - i);\r\n          POW_PRECISION = k;\r\n\r\n          // Convert str as if an integer, then restore the fraction part by dividing the\r\n          // result by its base raised to a power.\r\n\r\n          y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'),\r\n           10, baseOut, decimal);\r\n          y.e = y.c.length;\r\n        }\r\n\r\n        // Convert the number as integer.\r\n\r\n        xc = toBaseOut(str, baseIn, baseOut, callerIsToString\r\n         ? (alphabet = ALPHABET, decimal)\r\n         : (alphabet = decimal, ALPHABET));\r\n\r\n        // xc now represents str as an integer and converted to baseOut. e is the exponent.\r\n        e = k = xc.length;\r\n\r\n        // Remove trailing zeros.\r\n        for (; xc[--k] == 0; xc.pop());\r\n\r\n        // Zero?\r\n        if (!xc[0]) return alphabet.charAt(0);\r\n\r\n        // Does str represent an integer? If so, no need for the division.\r\n        if (i < 0) {\r\n          --e;\r\n        } else {\r\n          x.c = xc;\r\n          x.e = e;\r\n\r\n          // The sign is needed for correct rounding.\r\n          x.s = sign;\r\n          x = div(x, y, dp, rm, baseOut);\r\n          xc = x.c;\r\n          r = x.r;\r\n          e = x.e;\r\n        }\r\n\r\n        // xc now represents str converted to baseOut.\r\n\r\n        // THe index of the rounding digit.\r\n        d = e + dp + 1;\r\n\r\n        // The rounding digit: the digit to the right of the digit that may be rounded up.\r\n        i = xc[d];\r\n\r\n        // Look at the rounding digits and mode to determine whether to round up.\r\n\r\n        k = baseOut / 2;\r\n        r = r || d < 0 || xc[d + 1] != null;\r\n\r\n        r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n              : i > k || i == k &&(rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||\r\n               rm == (x.s < 0 ? 8 : 7));\r\n\r\n        // If the index of the rounding digit is not greater than zero, or xc represents\r\n        // zero, then the result of the base conversion is zero or, if rounding up, a value\r\n        // such as 0.00001.\r\n        if (d < 1 || !xc[0]) {\r\n\r\n          // 1^-dp or 0\r\n          str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);\r\n        } else {\r\n\r\n          // Truncate xc to the required number of decimal places.\r\n          xc.length = d;\r\n\r\n          // Round up?\r\n          if (r) {\r\n\r\n            // Rounding up may mean the previous digit has to be rounded up and so on.\r\n            for (--baseOut; ++xc[--d] > baseOut;) {\r\n              xc[d] = 0;\r\n\r\n              if (!d) {\r\n                ++e;\r\n                xc = [1].concat(xc);\r\n              }\r\n            }\r\n          }\r\n\r\n          // Determine trailing zeros.\r\n          for (k = xc.length; !xc[--k];);\r\n\r\n          // E.g. [4, 11, 15] becomes 4bf.\r\n          for (i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++]));\r\n\r\n          // Add leading zeros, decimal point and trailing zeros as required.\r\n          str = toFixedPoint(str, e, alphabet.charAt(0));\r\n        }\r\n\r\n        // The caller will add the sign.\r\n        return str;\r\n      };\r\n    })();\r\n\r\n\r\n    // Perform division in the specified base. Called by div and convertBase.\r\n    div = (function () {\r\n\r\n      // Assume non-zero x and k.\r\n      function multiply(x, k, base) {\r\n        var m, temp, xlo, xhi,\r\n          carry = 0,\r\n          i = x.length,\r\n          klo = k % SQRT_BASE,\r\n          khi = k / SQRT_BASE | 0;\r\n\r\n        for (x = x.slice(); i--;) {\r\n          xlo = x[i] % SQRT_BASE;\r\n          xhi = x[i] / SQRT_BASE | 0;\r\n          m = khi * xlo + xhi * klo;\r\n          temp = klo * xlo + ((m % SQRT_BASE) * SQRT_BASE) + carry;\r\n          carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;\r\n          x[i] = temp % base;\r\n        }\r\n\r\n        if (carry) x = [carry].concat(x);\r\n\r\n        return x;\r\n      }\r\n\r\n      function compare(a, b, aL, bL) {\r\n        var i, cmp;\r\n\r\n        if (aL != bL) {\r\n          cmp = aL > bL ? 1 : -1;\r\n        } else {\r\n\r\n          for (i = cmp = 0; i < aL; i++) {\r\n\r\n            if (a[i] != b[i]) {\r\n              cmp = a[i] > b[i] ? 1 : -1;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n\r\n        return cmp;\r\n      }\r\n\r\n      function subtract(a, b, aL, base) {\r\n        var i = 0;\r\n\r\n        // Subtract b from a.\r\n        for (; aL--;) {\r\n          a[aL] -= i;\r\n          i = a[aL] < b[aL] ? 1 : 0;\r\n          a[aL] = i * base + a[aL] - b[aL];\r\n        }\r\n\r\n        // Remove leading zeros.\r\n        for (; !a[0] && a.length > 1; a.splice(0, 1));\r\n      }\r\n\r\n      // x: dividend, y: divisor.\r\n      return function (x, y, dp, rm, base) {\r\n        var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,\r\n          yL, yz,\r\n          s = x.s == y.s ? 1 : -1,\r\n          xc = x.c,\r\n          yc = y.c;\r\n\r\n        // Either NaN, Infinity or 0?\r\n        if (!xc || !xc[0] || !yc || !yc[0]) {\r\n\r\n          return new BigNumber(\r\n\r\n           // Return NaN if either NaN, or both Infinity or 0.\r\n           !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN :\r\n\r\n            // Return \u00B10 if x is \u00B10 or y is \u00B1Infinity, or return \u00B1Infinity as y is \u00B10.\r\n            xc && xc[0] == 0 || !yc ? s * 0 : s / 0\r\n         );\r\n        }\r\n\r\n        q = new BigNumber(s);\r\n        qc = q.c = [];\r\n        e = x.e - y.e;\r\n        s = dp + e + 1;\r\n\r\n        if (!base) {\r\n          base = BASE;\r\n          e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);\r\n          s = s / LOG_BASE | 0;\r\n        }\r\n\r\n        // Result exponent may be one less then the current value of e.\r\n        // The coefficients of the BigNumbers from convertBase may have trailing zeros.\r\n        for (i = 0; yc[i] == (xc[i] || 0); i++);\r\n\r\n        if (yc[i] > (xc[i] || 0)) e--;\r\n\r\n        if (s < 0) {\r\n          qc.push(1);\r\n          more = true;\r\n        } else {\r\n          xL = xc.length;\r\n          yL = yc.length;\r\n          i = 0;\r\n          s += 2;\r\n\r\n          // Normalise xc and yc so highest order digit of yc is >= base / 2.\r\n\r\n          n = mathfloor(base / (yc[0] + 1));\r\n\r\n          // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.\r\n          // if (n > 1 || n++ == 1 && yc[0] < base / 2) {\r\n          if (n > 1) {\r\n            yc = multiply(yc, n, base);\r\n            xc = multiply(xc, n, base);\r\n            yL = yc.length;\r\n            xL = xc.length;\r\n          }\r\n\r\n          xi = yL;\r\n          rem = xc.slice(0, yL);\r\n          remL = rem.length;\r\n\r\n          // Add zeros to make remainder as long as divisor.\r\n          for (; remL < yL; rem[remL++] = 0);\r\n          yz = yc.slice();\r\n          yz = [0].concat(yz);\r\n          yc0 = yc[0];\r\n          if (yc[1] >= base / 2) yc0++;\r\n          // Not necessary, but to prevent trial digit n > base, when using base 3.\r\n          // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;\r\n\r\n          do {\r\n            n = 0;\r\n\r\n            // Compare divisor and remainder.\r\n            cmp = compare(yc, rem, yL, remL);\r\n\r\n            // If divisor < remainder.\r\n            if (cmp < 0) {\r\n\r\n              // Calculate trial digit, n.\r\n\r\n              rem0 = rem[0];\r\n              if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\r\n\r\n              // n is how many times the divisor goes into the current remainder.\r\n              n = mathfloor(rem0 / yc0);\r\n\r\n              //  Algorithm:\r\n              //  product = divisor multiplied by trial digit (n).\r\n              //  Compare product and remainder.\r\n              //  If product is greater than remainder:\r\n              //    Subtract divisor from product, decrement trial digit.\r\n              //  Subtract product from remainder.\r\n              //  If product was less than remainder at the last compare:\r\n              //    Compare new remainder and divisor.\r\n              //    If remainder is greater than divisor:\r\n              //      Subtract divisor from remainder, increment trial digit.\r\n\r\n              if (n > 1) {\r\n\r\n                // n may be > base only when base is 3.\r\n                if (n >= base) n = base - 1;\r\n\r\n                // product = divisor * trial digit.\r\n                prod = multiply(yc, n, base);\r\n                prodL = prod.length;\r\n                remL = rem.length;\r\n\r\n                // Compare product and remainder.\r\n                // If product > remainder then trial digit n too high.\r\n                // n is 1 too high about 5% of the time, and is not known to have\r\n                // ever been more than 1 too high.\r\n                while (compare(prod, rem, prodL, remL) == 1) {\r\n                  n--;\r\n\r\n                  // Subtract divisor from product.\r\n                  subtract(prod, yL < prodL ? yz : yc, prodL, base);\r\n                  prodL = prod.length;\r\n                  cmp = 1;\r\n                }\r\n              } else {\r\n\r\n                // n is 0 or 1, cmp is -1.\r\n                // If n is 0, there is no need to compare yc and rem again below,\r\n                // so change cmp to 1 to avoid it.\r\n                // If n is 1, leave cmp as -1, so yc and rem are compared again.\r\n                if (n == 0) {\r\n\r\n                  // divisor < remainder, so n must be at least 1.\r\n                  cmp = n = 1;\r\n                }\r\n\r\n                // product = divisor\r\n                prod = yc.slice();\r\n                prodL = prod.length;\r\n              }\r\n\r\n              if (prodL < remL) prod = [0].concat(prod);\r\n\r\n              // Subtract product from remainder.\r\n              subtract(rem, prod, remL, base);\r\n              remL = rem.length;\r\n\r\n               // If product was < remainder.\r\n              if (cmp == -1) {\r\n\r\n                // Compare divisor and new remainder.\r\n                // If divisor < new remainder, subtract divisor from remainder.\r\n                // Trial digit n too low.\r\n                // n is 1 too low about 5% of the time, and very rarely 2 too low.\r\n                while (compare(yc, rem, yL, remL) < 1) {\r\n                  n++;\r\n\r\n                  // Subtract divisor from remainder.\r\n                  subtract(rem, yL < remL ? yz : yc, remL, base);\r\n                  remL = rem.length;\r\n                }\r\n              }\r\n            } else if (cmp === 0) {\r\n              n++;\r\n              rem = [0];\r\n            } // else cmp === 1 and n will be 0\r\n\r\n            // Add the next digit, n, to the result array.\r\n            qc[i++] = n;\r\n\r\n            // Update the remainder.\r\n            if (rem[0]) {\r\n              rem[remL++] = xc[xi] || 0;\r\n            } else {\r\n              rem = [xc[xi]];\r\n              remL = 1;\r\n            }\r\n          } while ((xi++ < xL || rem[0] != null) && s--);\r\n\r\n          more = rem[0] != null;\r\n\r\n          // Leading zero?\r\n          if (!qc[0]) qc.splice(0, 1);\r\n        }\r\n\r\n        if (base == BASE) {\r\n\r\n          // To calculate q.e, first get the number of digits of qc[0].\r\n          for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);\r\n\r\n          round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);\r\n\r\n        // Caller is convertBase.\r\n        } else {\r\n          q.e = e;\r\n          q.r = +more;\r\n        }\r\n\r\n        return q;\r\n      };\r\n    })();\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of BigNumber n in fixed-point or exponential\r\n     * notation rounded to the specified decimal places or significant digits.\r\n     *\r\n     * n: a BigNumber.\r\n     * i: the index of the last digit required (i.e. the digit that may be rounded up).\r\n     * rm: the rounding mode.\r\n     * id: 1 (toExponential) or 2 (toPrecision).\r\n     */\r\n    function format(n, i, rm, id) {\r\n      var c0, e, ne, len, str;\r\n\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n\r\n      if (!n.c) return n.toString();\r\n\r\n      c0 = n.c[0];\r\n      ne = n.e;\r\n\r\n      if (i == null) {\r\n        str = coeffToString(n.c);\r\n        str = id == 1 || id == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS)\r\n         ? toExponential(str, ne)\r\n         : toFixedPoint(str, ne, '0');\r\n      } else {\r\n        n = round(new BigNumber(n), i, rm);\r\n\r\n        // n.e may have changed if the value was rounded up.\r\n        e = n.e;\r\n\r\n        str = coeffToString(n.c);\r\n        len = str.length;\r\n\r\n        // toPrecision returns exponential notation if the number of significant digits\r\n        // specified is less than the number of digits necessary to represent the integer\r\n        // part of the value in fixed-point notation.\r\n\r\n        // Exponential notation.\r\n        if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {\r\n\r\n          // Append zeros?\r\n          for (; len < i; str += '0', len++);\r\n          str = toExponential(str, e);\r\n\r\n        // Fixed-point notation.\r\n        } else {\r\n          i -= ne;\r\n          str = toFixedPoint(str, e, '0');\r\n\r\n          // Append zeros?\r\n          if (e + 1 > len) {\r\n            if (--i > 0) for (str += '.'; i--; str += '0');\r\n          } else {\r\n            i += e - len;\r\n            if (i > 0) {\r\n              if (e + 1 == len) str += '.';\r\n              for (; i--; str += '0');\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return n.s < 0 && c0 ? '-' + str : str;\r\n    }\r\n\r\n\r\n    // Handle BigNumber.max and BigNumber.min.\r\n    // If any number is NaN, return NaN.\r\n    function maxOrMin(args, n) {\r\n      var k, y,\r\n        i = 1,\r\n        x = new BigNumber(args[0]);\r\n\r\n      for (; i < args.length; i++) {\r\n        y = new BigNumber(args[i]);\r\n        if (!y.s || (k = compare(x, y)) === n || k === 0 && x.s === n) {\r\n          x = y;\r\n        }\r\n      }\r\n\r\n      return x;\r\n    }\r\n\r\n\r\n    /*\r\n     * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.\r\n     * Called by minus, plus and times.\r\n     */\r\n    function normalise(n, c, e) {\r\n      var i = 1,\r\n        j = c.length;\r\n\r\n       // Remove trailing zeros.\r\n      for (; !c[--j]; c.pop());\r\n\r\n      // Calculate the base 10 exponent. First get the number of digits of c[0].\r\n      for (j = c[0]; j >= 10; j /= 10, i++);\r\n\r\n      // Overflow?\r\n      if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {\r\n\r\n        // Infinity.\r\n        n.c = n.e = null;\r\n\r\n      // Underflow?\r\n      } else if (e < MIN_EXP) {\r\n\r\n        // Zero.\r\n        n.c = [n.e = 0];\r\n      } else {\r\n        n.e = e;\r\n        n.c = c;\r\n      }\r\n\r\n      return n;\r\n    }\r\n\r\n\r\n    // Handle values that fail the validity test in BigNumber.\r\n    parseNumeric = (function () {\r\n      var basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i,\r\n        dotAfter = /^([^.]+)\\.$/,\r\n        dotBefore = /^\\.([^.]+)$/,\r\n        isInfinityOrNaN = /^-?(Infinity|NaN)$/,\r\n        whitespaceOrPlus = /^\\s*\\+(?=[\\w.])|^\\s+|\\s+$/g;\r\n\r\n      return function (x, str, isNum, b) {\r\n        var base,\r\n          s = isNum ? str : str.replace(whitespaceOrPlus, '');\r\n\r\n        // No exception on \u00B1Infinity or NaN.\r\n        if (isInfinityOrNaN.test(s)) {\r\n          x.s = isNaN(s) ? null : s < 0 ? -1 : 1;\r\n        } else {\r\n          if (!isNum) {\r\n\r\n            // basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i\r\n            s = s.replace(basePrefix, function (m, p1, p2) {\r\n              base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;\r\n              return !b || b == base ? p1 : m;\r\n            });\r\n\r\n            if (b) {\r\n              base = b;\r\n\r\n              // E.g. '1.' to '1', '.1' to '0.1'\r\n              s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');\r\n            }\r\n\r\n            if (str != s) return new BigNumber(s, base);\r\n          }\r\n\r\n          // '[BigNumber Error] Not a number: {n}'\r\n          // '[BigNumber Error] Not a base {b} number: {n}'\r\n          if (BigNumber.DEBUG) {\r\n            throw Error\r\n              (bignumberError + 'Not a' + (b ? ' base ' + b : '') + ' number: ' + str);\r\n          }\r\n\r\n          // NaN\r\n          x.s = null;\r\n        }\r\n\r\n        x.c = x.e = null;\r\n      }\r\n    })();\r\n\r\n\r\n    /*\r\n     * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.\r\n     * If r is truthy, it is known that there are more digits after the rounding digit.\r\n     */\r\n    function round(x, sd, rm, r) {\r\n      var d, i, j, k, n, ni, rd,\r\n        xc = x.c,\r\n        pows10 = POWS_TEN;\r\n\r\n      // if x is not Infinity or NaN...\r\n      if (xc) {\r\n\r\n        // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n        // n is a base 1e14 number, the value of the element of array x.c containing rd.\r\n        // ni is the index of n within x.c.\r\n        // d is the number of digits of n.\r\n        // i is the index of rd within n including leading zeros.\r\n        // j is the actual index of rd within n (if < 0, rd is a leading zero).\r\n        out: {\r\n\r\n          // Get the number of digits of the first element of xc.\r\n          for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);\r\n          i = sd - d;\r\n\r\n          // If the rounding digit is in the first element of xc...\r\n          if (i < 0) {\r\n            i += LOG_BASE;\r\n            j = sd;\r\n            n = xc[ni = 0];\r\n\r\n            // Get the rounding digit at index j of n.\r\n            rd = mathfloor(n / pows10[d - j - 1] % 10);\r\n          } else {\r\n            ni = mathceil((i + 1) / LOG_BASE);\r\n\r\n            if (ni >= xc.length) {\r\n\r\n              if (r) {\r\n\r\n                // Needed by sqrt.\r\n                for (; xc.length <= ni; xc.push(0));\r\n                n = rd = 0;\r\n                d = 1;\r\n                i %= LOG_BASE;\r\n                j = i - LOG_BASE + 1;\r\n              } else {\r\n                break out;\r\n              }\r\n            } else {\r\n              n = k = xc[ni];\r\n\r\n              // Get the number of digits of n.\r\n              for (d = 1; k >= 10; k /= 10, d++);\r\n\r\n              // Get the index of rd within n.\r\n              i %= LOG_BASE;\r\n\r\n              // Get the index of rd within n, adjusted for leading zeros.\r\n              // The number of leading zeros of n is given by LOG_BASE - d.\r\n              j = i - LOG_BASE + d;\r\n\r\n              // Get the rounding digit at index j of n.\r\n              rd = j < 0 ? 0 : mathfloor(n / pows10[d - j - 1] % 10);\r\n            }\r\n          }\r\n\r\n          r = r || sd < 0 ||\r\n\r\n          // Are there any non-zero digits after the rounding digit?\r\n          // The expression  n % pows10[d - j - 1]  returns all digits of n to the right\r\n          // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.\r\n           xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);\r\n\r\n          r = rm < 4\r\n           ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n           : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 &&\r\n\r\n            // Check whether the digit to the left of the rounding digit is odd.\r\n            ((i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10) & 1 ||\r\n             rm == (x.s < 0 ? 8 : 7));\r\n\r\n          if (sd < 1 || !xc[0]) {\r\n            xc.length = 0;\r\n\r\n            if (r) {\r\n\r\n              // Convert sd to decimal places.\r\n              sd -= x.e + 1;\r\n\r\n              // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n              xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];\r\n              x.e = -sd || 0;\r\n            } else {\r\n\r\n              // Zero.\r\n              xc[0] = x.e = 0;\r\n            }\r\n\r\n            return x;\r\n          }\r\n\r\n          // Remove excess digits.\r\n          if (i == 0) {\r\n            xc.length = ni;\r\n            k = 1;\r\n            ni--;\r\n          } else {\r\n            xc.length = ni + 1;\r\n            k = pows10[LOG_BASE - i];\r\n\r\n            // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n            // j > 0 means i > number of leading zeros of n.\r\n            xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;\r\n          }\r\n\r\n          // Round up?\r\n          if (r) {\r\n\r\n            for (; ;) {\r\n\r\n              // If the digit to be rounded up is in the first element of xc...\r\n              if (ni == 0) {\r\n\r\n                // i will be the length of xc[0] before k is added.\r\n                for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);\r\n                j = xc[0] += k;\r\n                for (k = 1; j >= 10; j /= 10, k++);\r\n\r\n                // if i != k the length has increased.\r\n                if (i != k) {\r\n                  x.e++;\r\n                  if (xc[0] == BASE) xc[0] = 1;\r\n                }\r\n\r\n                break;\r\n              } else {\r\n                xc[ni] += k;\r\n                if (xc[ni] != BASE) break;\r\n                xc[ni--] = 0;\r\n                k = 1;\r\n              }\r\n            }\r\n          }\r\n\r\n          // Remove trailing zeros.\r\n          for (i = xc.length; xc[--i] === 0; xc.pop());\r\n        }\r\n\r\n        // Overflow? Infinity.\r\n        if (x.e > MAX_EXP) {\r\n          x.c = x.e = null;\r\n\r\n        // Underflow? Zero.\r\n        } else if (x.e < MIN_EXP) {\r\n          x.c = [x.e = 0];\r\n        }\r\n      }\r\n\r\n      return x;\r\n    }\r\n\r\n\r\n    function valueOf(n) {\r\n      var str,\r\n        e = n.e;\r\n\r\n      if (e === null) return n.toString();\r\n\r\n      str = coeffToString(n.c);\r\n\r\n      str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n        ? toExponential(str, e)\r\n        : toFixedPoint(str, e, '0');\r\n\r\n      return n.s < 0 ? '-' + str : str;\r\n    }\r\n\r\n\r\n    // PROTOTYPE/INSTANCE METHODS\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the absolute value of this BigNumber.\r\n     */\r\n    P.absoluteValue = P.abs = function () {\r\n      var x = new BigNumber(this);\r\n      if (x.s < 0) x.s = 1;\r\n      return x;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return\r\n     *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     *   0 if they have the same value,\r\n     *   or null if the value of either is NaN.\r\n     */\r\n    P.comparedTo = function (y, b) {\r\n      return compare(this, new BigNumber(y, b));\r\n    };\r\n\r\n\r\n    /*\r\n     * If dp is undefined or null or true or false, return the number of decimal places of the\r\n     * value of this BigNumber, or null if the value of this BigNumber is \u00B1Infinity or NaN.\r\n     *\r\n     * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [dp] {number} Decimal places: integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.decimalPlaces = P.dp = function (dp, rm) {\r\n      var c, n, v,\r\n        x = this;\r\n\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        if (rm == null) rm = ROUNDING_MODE;\r\n        else intCheck(rm, 0, 8);\r\n\r\n        return round(new BigNumber(x), dp + x.e + 1, rm);\r\n      }\r\n\r\n      if (!(c = x.c)) return null;\r\n      n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;\r\n\r\n      // Subtract the number of trailing zeros of the last number.\r\n      if (v = c[v]) for (; v % 10 == 0; v /= 10, n--);\r\n      if (n < 0) n = 0;\r\n\r\n      return n;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n / 0 = I\r\n     *  n / N = N\r\n     *  n / I = 0\r\n     *  0 / n = 0\r\n     *  0 / 0 = N\r\n     *  0 / N = N\r\n     *  0 / I = 0\r\n     *  N / n = N\r\n     *  N / 0 = N\r\n     *  N / N = N\r\n     *  N / I = N\r\n     *  I / n = I\r\n     *  I / 0 = I\r\n     *  I / N = N\r\n     *  I / I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber divided by the value of\r\n     * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\r\n    P.dividedBy = P.div = function (y, b) {\r\n      return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the integer part of dividing the value of this\r\n     * BigNumber by the value of BigNumber(y, b).\r\n     */\r\n    P.dividedToIntegerBy = P.idiv = function (y, b) {\r\n      return div(this, new BigNumber(y, b), 0, 1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.\r\n     *\r\n     * If m is present, return the result modulo m.\r\n     * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.\r\n     *\r\n     * The modular power operation works efficiently when x, n, and m are integers, otherwise it\r\n     * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.\r\n     *\r\n     * n {number|string|BigNumber} The exponent. An integer.\r\n     * [m] {number|string|BigNumber} The modulus.\r\n     *\r\n     * '[BigNumber Error] Exponent not an integer: {n}'\r\n     */\r\n    P.exponentiatedBy = P.pow = function (n, m) {\r\n      var half, isModExp, i, k, more, nIsBig, nIsNeg, nIsOdd, y,\r\n        x = this;\r\n\r\n      n = new BigNumber(n);\r\n\r\n      // Allow NaN and \u00B1Infinity, but not other non-integers.\r\n      if (n.c && !n.isInteger()) {\r\n        throw Error\r\n          (bignumberError + 'Exponent not an integer: ' + valueOf(n));\r\n      }\r\n\r\n      if (m != null) m = new BigNumber(m);\r\n\r\n      // Exponent of MAX_SAFE_INTEGER is 15.\r\n      nIsBig = n.e > 14;\r\n\r\n      // If x is NaN, \u00B1Infinity, \u00B10 or \u00B11, or n is \u00B1Infinity, NaN or \u00B10.\r\n      if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {\r\n\r\n        // The sign of the result of pow when x is negative depends on the evenness of n.\r\n        // If +n overflows to \u00B1Infinity, the evenness of n would be not be known.\r\n        y = new BigNumber(Math.pow(+valueOf(x), nIsBig ? n.s * (2 - isOdd(n)) : +valueOf(n)));\r\n        return m ? y.mod(m) : y;\r\n      }\r\n\r\n      nIsNeg = n.s < 0;\r\n\r\n      if (m) {\r\n\r\n        // x % m returns NaN if abs(m) is zero, or m is NaN.\r\n        if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);\r\n\r\n        isModExp = !nIsNeg && x.isInteger() && m.isInteger();\r\n\r\n        if (isModExp) x = x.mod(m);\r\n\r\n      // Overflow to \u00B1Infinity: >=2**1e10 or >=1.0000024**1e15.\r\n      // Underflow to \u00B10: <=0.79**1e10 or <=0.9999975**1e15.\r\n      } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0\r\n        // [1, 240000000]\r\n        ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7\r\n        // [80000000000000]  [99999750000000]\r\n        : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {\r\n\r\n        // If x is negative and n is odd, k = -0, else k = 0.\r\n        k = x.s < 0 && isOdd(n) ? -0 : 0;\r\n\r\n        // If x >= 1, k = \u00B1Infinity.\r\n        if (x.e > -1) k = 1 / k;\r\n\r\n        // If n is negative return \u00B10, else return \u00B1Infinity.\r\n        return new BigNumber(nIsNeg ? 1 / k : k);\r\n\r\n      } else if (POW_PRECISION) {\r\n\r\n        // Truncating each coefficient array to a length of k after each multiplication\r\n        // equates to truncating significant digits to POW_PRECISION + [28, 41],\r\n        // i.e. there will be a minimum of 28 guard digits retained.\r\n        k = mathceil(POW_PRECISION / LOG_BASE + 2);\r\n      }\r\n\r\n      if (nIsBig) {\r\n        half = new BigNumber(0.5);\r\n        if (nIsNeg) n.s = 1;\r\n        nIsOdd = isOdd(n);\r\n      } else {\r\n        i = Math.abs(+valueOf(n));\r\n        nIsOdd = i % 2;\r\n      }\r\n\r\n      y = new BigNumber(ONE);\r\n\r\n      // Performs 54 loop iterations for n of 9007199254740991.\r\n      for (; ;) {\r\n\r\n        if (nIsOdd) {\r\n          y = y.times(x);\r\n          if (!y.c) break;\r\n\r\n          if (k) {\r\n            if (y.c.length > k) y.c.length = k;\r\n          } else if (isModExp) {\r\n            y = y.mod(m);    //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));\r\n          }\r\n        }\r\n\r\n        if (i) {\r\n          i = mathfloor(i / 2);\r\n          if (i === 0) break;\r\n          nIsOdd = i % 2;\r\n        } else {\r\n          n = n.times(half);\r\n          round(n, n.e + 1, 1);\r\n\r\n          if (n.e > 14) {\r\n            nIsOdd = isOdd(n);\r\n          } else {\r\n            i = +valueOf(n);\r\n            if (i === 0) break;\r\n            nIsOdd = i % 2;\r\n          }\r\n        }\r\n\r\n        x = x.times(x);\r\n\r\n        if (k) {\r\n          if (x.c && x.c.length > k) x.c.length = k;\r\n        } else if (isModExp) {\r\n          x = x.mod(m);    //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));\r\n        }\r\n      }\r\n\r\n      if (isModExp) return y;\r\n      if (nIsNeg) y = ONE.div(y);\r\n\r\n      return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer\r\n     * using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'\r\n     */\r\n    P.integerValue = function (rm) {\r\n      var n = new BigNumber(this);\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n      return round(n, n.e + 1, rm);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isEqualTo = P.eq = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) === 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is a finite number, otherwise return false.\r\n     */\r\n    P.isFinite = function () {\r\n      return !!this.c;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isGreaterThan = P.gt = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) > 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is greater than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\r\n    P.isGreaterThanOrEqualTo = P.gte = function (y, b) {\r\n      return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;\r\n\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is an integer, otherwise return false.\r\n     */\r\n    P.isInteger = function () {\r\n      return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isLessThan = P.lt = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) < 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is less than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\r\n    P.isLessThanOrEqualTo = P.lte = function (y, b) {\r\n      return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is NaN, otherwise return false.\r\n     */\r\n    P.isNaN = function () {\r\n      return !this.s;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is negative, otherwise return false.\r\n     */\r\n    P.isNegative = function () {\r\n      return this.s < 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is positive, otherwise return false.\r\n     */\r\n    P.isPositive = function () {\r\n      return this.s > 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is 0 or -0, otherwise return false.\r\n     */\r\n    P.isZero = function () {\r\n      return !!this.c && this.c[0] == 0;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n - 0 = n\r\n     *  n - N = N\r\n     *  n - I = -I\r\n     *  0 - n = -n\r\n     *  0 - 0 = 0\r\n     *  0 - N = N\r\n     *  0 - I = -I\r\n     *  N - n = N\r\n     *  N - 0 = N\r\n     *  N - N = N\r\n     *  N - I = N\r\n     *  I - n = I\r\n     *  I - 0 = I\r\n     *  I - N = N\r\n     *  I - I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber minus the value of\r\n     * BigNumber(y, b).\r\n     */\r\n    P.minus = function (y, b) {\r\n      var i, j, t, xLTy,\r\n        x = this,\r\n        a = x.s;\r\n\r\n      y = new BigNumber(y, b);\r\n      b = y.s;\r\n\r\n      // Either NaN?\r\n      if (!a || !b) return new BigNumber(NaN);\r\n\r\n      // Signs differ?\r\n      if (a != b) {\r\n        y.s = -b;\r\n        return x.plus(y);\r\n      }\r\n\r\n      var xe = x.e / LOG_BASE,\r\n        ye = y.e / LOG_BASE,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      if (!xe || !ye) {\r\n\r\n        // Either Infinity?\r\n        if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);\r\n\r\n        // Either zero?\r\n        if (!xc[0] || !yc[0]) {\r\n\r\n          // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n          return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x :\r\n\r\n           // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity\r\n           ROUNDING_MODE == 3 ? -0 : 0);\r\n        }\r\n      }\r\n\r\n      xe = bitFloor(xe);\r\n      ye = bitFloor(ye);\r\n      xc = xc.slice();\r\n\r\n      // Determine which is the bigger number.\r\n      if (a = xe - ye) {\r\n\r\n        if (xLTy = a < 0) {\r\n          a = -a;\r\n          t = xc;\r\n        } else {\r\n          ye = xe;\r\n          t = yc;\r\n        }\r\n\r\n        t.reverse();\r\n\r\n        // Prepend zeros to equalise exponents.\r\n        for (b = a; b--; t.push(0));\r\n        t.reverse();\r\n      } else {\r\n\r\n        // Exponents equal. Check digit by digit.\r\n        j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;\r\n\r\n        for (a = b = 0; b < j; b++) {\r\n\r\n          if (xc[b] != yc[b]) {\r\n            xLTy = xc[b] < yc[b];\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      // x < y? Point xc to the array of the bigger number.\r\n      if (xLTy) {\r\n        t = xc;\r\n        xc = yc;\r\n        yc = t;\r\n        y.s = -y.s;\r\n      }\r\n\r\n      b = (j = yc.length) - (i = xc.length);\r\n\r\n      // Append zeros to xc if shorter.\r\n      // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.\r\n      if (b > 0) for (; b--; xc[i++] = 0);\r\n      b = BASE - 1;\r\n\r\n      // Subtract yc from xc.\r\n      for (; j > a;) {\r\n\r\n        if (xc[--j] < yc[j]) {\r\n          for (i = j; i && !xc[--i]; xc[i] = b);\r\n          --xc[i];\r\n          xc[j] += BASE;\r\n        }\r\n\r\n        xc[j] -= yc[j];\r\n      }\r\n\r\n      // Remove leading zeros and adjust exponent accordingly.\r\n      for (; xc[0] == 0; xc.splice(0, 1), --ye);\r\n\r\n      // Zero?\r\n      if (!xc[0]) {\r\n\r\n        // Following IEEE 754 (2008) 6.3,\r\n        // n - n = +0  but  n - n = -0  when rounding towards -Infinity.\r\n        y.s = ROUNDING_MODE == 3 ? -1 : 1;\r\n        y.c = [y.e = 0];\r\n        return y;\r\n      }\r\n\r\n      // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity\r\n      // for finite x and y.\r\n      return normalise(y, xc, ye);\r\n    };\r\n\r\n\r\n    /*\r\n     *   n % 0 =  N\r\n     *   n % N =  N\r\n     *   n % I =  n\r\n     *   0 % n =  0\r\n     *  -0 % n = -0\r\n     *   0 % 0 =  N\r\n     *   0 % N =  N\r\n     *   0 % I =  0\r\n     *   N % n =  N\r\n     *   N % 0 =  N\r\n     *   N % N =  N\r\n     *   N % I =  N\r\n     *   I % n =  N\r\n     *   I % 0 =  N\r\n     *   I % N =  N\r\n     *   I % I =  N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber modulo the value of\r\n     * BigNumber(y, b). The result depends on the value of MODULO_MODE.\r\n     */\r\n    P.modulo = P.mod = function (y, b) {\r\n      var q, s,\r\n        x = this;\r\n\r\n      y = new BigNumber(y, b);\r\n\r\n      // Return NaN if x is Infinity or NaN, or y is NaN or zero.\r\n      if (!x.c || !y.s || y.c && !y.c[0]) {\r\n        return new BigNumber(NaN);\r\n\r\n      // Return x if y is Infinity or x is zero.\r\n      } else if (!y.c || x.c && !x.c[0]) {\r\n        return new BigNumber(x);\r\n      }\r\n\r\n      if (MODULO_MODE == 9) {\r\n\r\n        // Euclidian division: q = sign(y) * floor(x / abs(y))\r\n        // r = x - qy    where  0 <= r < abs(y)\r\n        s = y.s;\r\n        y.s = 1;\r\n        q = div(x, y, 0, 3);\r\n        y.s = s;\r\n        q.s *= s;\r\n      } else {\r\n        q = div(x, y, 0, MODULO_MODE);\r\n      }\r\n\r\n      y = x.minus(q.times(y));\r\n\r\n      // To match JavaScript %, ensure sign of zero is sign of dividend.\r\n      if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;\r\n\r\n      return y;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n * 0 = 0\r\n     *  n * N = N\r\n     *  n * I = I\r\n     *  0 * n = 0\r\n     *  0 * 0 = 0\r\n     *  0 * N = N\r\n     *  0 * I = N\r\n     *  N * n = N\r\n     *  N * 0 = N\r\n     *  N * N = N\r\n     *  N * I = N\r\n     *  I * n = I\r\n     *  I * 0 = N\r\n     *  I * N = N\r\n     *  I * I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value\r\n     * of BigNumber(y, b).\r\n     */\r\n    P.multipliedBy = P.times = function (y, b) {\r\n      var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,\r\n        base, sqrtBase,\r\n        x = this,\r\n        xc = x.c,\r\n        yc = (y = new BigNumber(y, b)).c;\r\n\r\n      // Either NaN, \u00B1Infinity or \u00B10?\r\n      if (!xc || !yc || !xc[0] || !yc[0]) {\r\n\r\n        // Return NaN if either is NaN, or one is 0 and the other is Infinity.\r\n        if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {\r\n          y.c = y.e = y.s = null;\r\n        } else {\r\n          y.s *= x.s;\r\n\r\n          // Return \u00B1Infinity if either is \u00B1Infinity.\r\n          if (!xc || !yc) {\r\n            y.c = y.e = null;\r\n\r\n          // Return \u00B10 if either is \u00B10.\r\n          } else {\r\n            y.c = [0];\r\n            y.e = 0;\r\n          }\r\n        }\r\n\r\n        return y;\r\n      }\r\n\r\n      e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);\r\n      y.s *= x.s;\r\n      xcL = xc.length;\r\n      ycL = yc.length;\r\n\r\n      // Ensure xc points to longer array and xcL to its length.\r\n      if (xcL < ycL) {\r\n        zc = xc;\r\n        xc = yc;\r\n        yc = zc;\r\n        i = xcL;\r\n        xcL = ycL;\r\n        ycL = i;\r\n      }\r\n\r\n      // Initialise the result array with zeros.\r\n      for (i = xcL + ycL, zc = []; i--; zc.push(0));\r\n\r\n      base = BASE;\r\n      sqrtBase = SQRT_BASE;\r\n\r\n      for (i = ycL; --i >= 0;) {\r\n        c = 0;\r\n        ylo = yc[i] % sqrtBase;\r\n        yhi = yc[i] / sqrtBase | 0;\r\n\r\n        for (k = xcL, j = i + k; j > i;) {\r\n          xlo = xc[--k] % sqrtBase;\r\n          xhi = xc[k] / sqrtBase | 0;\r\n          m = yhi * xlo + xhi * ylo;\r\n          xlo = ylo * xlo + ((m % sqrtBase) * sqrtBase) + zc[j] + c;\r\n          c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;\r\n          zc[j--] = xlo % base;\r\n        }\r\n\r\n        zc[j] = c;\r\n      }\r\n\r\n      if (c) {\r\n        ++e;\r\n      } else {\r\n        zc.splice(0, 1);\r\n      }\r\n\r\n      return normalise(y, zc, e);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber negated,\r\n     * i.e. multiplied by -1.\r\n     */\r\n    P.negated = function () {\r\n      var x = new BigNumber(this);\r\n      x.s = -x.s || null;\r\n      return x;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n + 0 = n\r\n     *  n + N = N\r\n     *  n + I = I\r\n     *  0 + n = n\r\n     *  0 + 0 = 0\r\n     *  0 + N = N\r\n     *  0 + I = I\r\n     *  N + n = N\r\n     *  N + 0 = N\r\n     *  N + N = N\r\n     *  N + I = N\r\n     *  I + n = I\r\n     *  I + 0 = I\r\n     *  I + N = N\r\n     *  I + I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber plus the value of\r\n     * BigNumber(y, b).\r\n     */\r\n    P.plus = function (y, b) {\r\n      var t,\r\n        x = this,\r\n        a = x.s;\r\n\r\n      y = new BigNumber(y, b);\r\n      b = y.s;\r\n\r\n      // Either NaN?\r\n      if (!a || !b) return new BigNumber(NaN);\r\n\r\n      // Signs differ?\r\n       if (a != b) {\r\n        y.s = -b;\r\n        return x.minus(y);\r\n      }\r\n\r\n      var xe = x.e / LOG_BASE,\r\n        ye = y.e / LOG_BASE,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      if (!xe || !ye) {\r\n\r\n        // Return \u00B1Infinity if either \u00B1Infinity.\r\n        if (!xc || !yc) return new BigNumber(a / 0);\r\n\r\n        // Either zero?\r\n        // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n        if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);\r\n      }\r\n\r\n      xe = bitFloor(xe);\r\n      ye = bitFloor(ye);\r\n      xc = xc.slice();\r\n\r\n      // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.\r\n      if (a = xe - ye) {\r\n        if (a > 0) {\r\n          ye = xe;\r\n          t = yc;\r\n        } else {\r\n          a = -a;\r\n          t = xc;\r\n        }\r\n\r\n        t.reverse();\r\n        for (; a--; t.push(0));\r\n        t.reverse();\r\n      }\r\n\r\n      a = xc.length;\r\n      b = yc.length;\r\n\r\n      // Point xc to the longer array, and b to the shorter length.\r\n      if (a - b < 0) {\r\n        t = yc;\r\n        yc = xc;\r\n        xc = t;\r\n        b = a;\r\n      }\r\n\r\n      // Only start adding at yc.length - 1 as the further digits of xc can be ignored.\r\n      for (a = 0; b;) {\r\n        a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;\r\n        xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;\r\n      }\r\n\r\n      if (a) {\r\n        xc = [a].concat(xc);\r\n        ++ye;\r\n      }\r\n\r\n      // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n      // ye = MAX_EXP + 1 possible\r\n      return normalise(y, xc, ye);\r\n    };\r\n\r\n\r\n    /*\r\n     * If sd is undefined or null or true or false, return the number of significant digits of\r\n     * the value of this BigNumber, or null if the value of this BigNumber is \u00B1Infinity or NaN.\r\n     * If sd is true include integer-part trailing zeros in the count.\r\n     *\r\n     * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.\r\n     *                     boolean: whether to count integer-part trailing zeros: true or false.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\r\n    P.precision = P.sd = function (sd, rm) {\r\n      var c, n, v,\r\n        x = this;\r\n\r\n      if (sd != null && sd !== !!sd) {\r\n        intCheck(sd, 1, MAX);\r\n        if (rm == null) rm = ROUNDING_MODE;\r\n        else intCheck(rm, 0, 8);\r\n\r\n        return round(new BigNumber(x), sd, rm);\r\n      }\r\n\r\n      if (!(c = x.c)) return null;\r\n      v = c.length - 1;\r\n      n = v * LOG_BASE + 1;\r\n\r\n      if (v = c[v]) {\r\n\r\n        // Subtract the number of trailing zeros of the last element.\r\n        for (; v % 10 == 0; v /= 10, n--);\r\n\r\n        // Add the number of digits of the first element.\r\n        for (v = c[0]; v >= 10; v /= 10, n++);\r\n      }\r\n\r\n      if (sd && x.e + 1 > n) n = x.e + 1;\r\n\r\n      return n;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber shifted by k places\r\n     * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.\r\n     *\r\n     * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'\r\n     */\r\n    P.shiftedBy = function (k) {\r\n      intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);\r\n      return this.times('1e' + k);\r\n    };\r\n\r\n\r\n    /*\r\n     *  sqrt(-n) =  N\r\n     *  sqrt(N) =  N\r\n     *  sqrt(-I) =  N\r\n     *  sqrt(I) =  I\r\n     *  sqrt(0) =  0\r\n     *  sqrt(-0) = -0\r\n     *\r\n     * Return a new BigNumber whose value is the square root of the value of this BigNumber,\r\n     * rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\r\n    P.squareRoot = P.sqrt = function () {\r\n      var m, n, r, rep, t,\r\n        x = this,\r\n        c = x.c,\r\n        s = x.s,\r\n        e = x.e,\r\n        dp = DECIMAL_PLACES + 4,\r\n        half = new BigNumber('0.5');\r\n\r\n      // Negative/NaN/Infinity/zero?\r\n      if (s !== 1 || !c || !c[0]) {\r\n        return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);\r\n      }\r\n\r\n      // Initial estimate.\r\n      s = Math.sqrt(+valueOf(x));\r\n\r\n      // Math.sqrt underflow/overflow?\r\n      // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n      if (s == 0 || s == 1 / 0) {\r\n        n = coeffToString(c);\r\n        if ((n.length + e) % 2 == 0) n += '0';\r\n        s = Math.sqrt(+n);\r\n        e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);\r\n\r\n        if (s == 1 / 0) {\r\n          n = '5e' + e;\r\n        } else {\r\n          n = s.toExponential();\r\n          n = n.slice(0, n.indexOf('e') + 1) + e;\r\n        }\r\n\r\n        r = new BigNumber(n);\r\n      } else {\r\n        r = new BigNumber(s + '');\r\n      }\r\n\r\n      // Check for zero.\r\n      // r could be zero if MIN_EXP is changed after the this value was created.\r\n      // This would cause a division by zero (x/t) and hence Infinity below, which would cause\r\n      // coeffToString to throw.\r\n      if (r.c[0]) {\r\n        e = r.e;\r\n        s = e + dp;\r\n        if (s < 3) s = 0;\r\n\r\n        // Newton-Raphson iteration.\r\n        for (; ;) {\r\n          t = r;\r\n          r = half.times(t.plus(div(x, t, dp, 1)));\r\n\r\n          if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {\r\n\r\n            // The exponent of r may here be one less than the final result exponent,\r\n            // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits\r\n            // are indexed correctly.\r\n            if (r.e < e) --s;\r\n            n = n.slice(s - 3, s + 1);\r\n\r\n            // The 4th rounding digit may be in error by -1 so if the 4 rounding digits\r\n            // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the\r\n            // iteration.\r\n            if (n == '9999' || !rep && n == '4999') {\r\n\r\n              // On the first iteration only, check to see if rounding up gives the\r\n              // exact result as the nines may infinitely repeat.\r\n              if (!rep) {\r\n                round(t, t.e + DECIMAL_PLACES + 2, 0);\r\n\r\n                if (t.times(t).eq(x)) {\r\n                  r = t;\r\n                  break;\r\n                }\r\n              }\r\n\r\n              dp += 4;\r\n              s += 4;\r\n              rep = 1;\r\n            } else {\r\n\r\n              // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact\r\n              // result. If not, then there are further digits and m will be truthy.\r\n              if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n                // Truncate to the first rounding digit.\r\n                round(r, r.e + DECIMAL_PLACES + 2, 1);\r\n                m = !r.times(r).eq(x);\r\n              }\r\n\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in exponential notation and\r\n     * rounded using ROUNDING_MODE to dp fixed decimal places.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.toExponential = function (dp, rm) {\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        dp++;\r\n      }\r\n      return format(this, dp, rm, 1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounding\r\n     * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',\r\n     * but e.g. (-0.00001).toFixed(0) is '-0'.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.toFixed = function (dp, rm) {\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        dp = dp + this.e + 1;\r\n      }\r\n      return format(this, dp, rm);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounded\r\n     * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties\r\n     * of the format or FORMAT object (see BigNumber.set).\r\n     *\r\n     * The formatting object may contain some or all of the properties shown below.\r\n     *\r\n     * FORMAT = {\r\n     *   prefix: '',\r\n     *   groupSize: 3,\r\n     *   secondaryGroupSize: 0,\r\n     *   groupSeparator: ',',\r\n     *   decimalSeparator: '.',\r\n     *   fractionGroupSize: 0,\r\n     *   fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n     *   suffix: ''\r\n     * };\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     * [format] {object} Formatting options. See FORMAT pbject above.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     * '[BigNumber Error] Argument not an object: {format}'\r\n     */\r\n    P.toFormat = function (dp, rm, format) {\r\n      var str,\r\n        x = this;\r\n\r\n      if (format == null) {\r\n        if (dp != null && rm && typeof rm == 'object') {\r\n          format = rm;\r\n          rm = null;\r\n        } else if (dp && typeof dp == 'object') {\r\n          format = dp;\r\n          dp = rm = null;\r\n        } else {\r\n          format = FORMAT;\r\n        }\r\n      } else if (typeof format != 'object') {\r\n        throw Error\r\n          (bignumberError + 'Argument not an object: ' + format);\r\n      }\r\n\r\n      str = x.toFixed(dp, rm);\r\n\r\n      if (x.c) {\r\n        var i,\r\n          arr = str.split('.'),\r\n          g1 = +format.groupSize,\r\n          g2 = +format.secondaryGroupSize,\r\n          groupSeparator = format.groupSeparator || '',\r\n          intPart = arr[0],\r\n          fractionPart = arr[1],\r\n          isNeg = x.s < 0,\r\n          intDigits = isNeg ? intPart.slice(1) : intPart,\r\n          len = intDigits.length;\r\n\r\n        if (g2) {\r\n          i = g1;\r\n          g1 = g2;\r\n          g2 = i;\r\n          len -= i;\r\n        }\r\n\r\n        if (g1 > 0 && len > 0) {\r\n          i = len % g1 || g1;\r\n          intPart = intDigits.substr(0, i);\r\n          for (; i < len; i += g1) intPart += groupSeparator + intDigits.substr(i, g1);\r\n          if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);\r\n          if (isNeg) intPart = '-' + intPart;\r\n        }\r\n\r\n        str = fractionPart\r\n         ? intPart + (format.decimalSeparator || '') + ((g2 = +format.fractionGroupSize)\r\n          ? fractionPart.replace(new RegExp('\\\\d{' + g2 + '}\\\\B', 'g'),\r\n           '$&' + (format.fractionGroupSeparator || ''))\r\n          : fractionPart)\r\n         : intPart;\r\n      }\r\n\r\n      return (format.prefix || '') + str + (format.suffix || '');\r\n    };\r\n\r\n\r\n    /*\r\n     * Return an array of two BigNumbers representing the value of this BigNumber as a simple\r\n     * fraction with an integer numerator and an integer denominator.\r\n     * The denominator will be a positive non-zero value less than or equal to the specified\r\n     * maximum denominator. If a maximum denominator is not specified, the denominator will be\r\n     * the lowest value necessary to represent the number exactly.\r\n     *\r\n     * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.\r\n     *\r\n     * '[BigNumber Error] Argument {not an integer|out of range} : {md}'\r\n     */\r\n    P.toFraction = function (md) {\r\n      var d, d0, d1, d2, e, exp, n, n0, n1, q, r, s,\r\n        x = this,\r\n        xc = x.c;\r\n\r\n      if (md != null) {\r\n        n = new BigNumber(md);\r\n\r\n        // Throw if md is less than one or is not an integer, unless it is Infinity.\r\n        if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {\r\n          throw Error\r\n            (bignumberError + 'Argument ' +\r\n              (n.isInteger() ? 'out of range: ' : 'not an integer: ') + valueOf(n));\r\n        }\r\n      }\r\n\r\n      if (!xc) return new BigNumber(x);\r\n\r\n      d = new BigNumber(ONE);\r\n      n1 = d0 = new BigNumber(ONE);\r\n      d1 = n0 = new BigNumber(ONE);\r\n      s = coeffToString(xc);\r\n\r\n      // Determine initial denominator.\r\n      // d is a power of 10 and the minimum max denominator that specifies the value exactly.\r\n      e = d.e = s.length - x.e - 1;\r\n      d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];\r\n      md = !md || n.comparedTo(d) > 0 ? (e > 0 ? d : n1) : n;\r\n\r\n      exp = MAX_EXP;\r\n      MAX_EXP = 1 / 0;\r\n      n = new BigNumber(s);\r\n\r\n      // n0 = d1 = 0\r\n      n0.c[0] = 0;\r\n\r\n      for (; ;)  {\r\n        q = div(n, d, 0, 1);\r\n        d2 = d0.plus(q.times(d1));\r\n        if (d2.comparedTo(md) == 1) break;\r\n        d0 = d1;\r\n        d1 = d2;\r\n        n1 = n0.plus(q.times(d2 = n1));\r\n        n0 = d2;\r\n        d = n.minus(q.times(d2 = d));\r\n        n = d2;\r\n      }\r\n\r\n      d2 = div(md.minus(d0), d1, 0, 1);\r\n      n0 = n0.plus(d2.times(n1));\r\n      d0 = d0.plus(d2.times(d1));\r\n      n0.s = n1.s = x.s;\r\n      e = e * 2;\r\n\r\n      // Determine which fraction is closer to x, n0/d0 or n1/d1\r\n      r = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(\r\n          div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1 ? [n1, d1] : [n0, d0];\r\n\r\n      MAX_EXP = exp;\r\n\r\n      return r;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return the value of this BigNumber converted to a number primitive.\r\n     */\r\n    P.toNumber = function () {\r\n      return +valueOf(this);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber rounded to sd significant digits\r\n     * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits\r\n     * necessary to represent the integer part of the value in fixed-point notation, then use\r\n     * exponential notation.\r\n     *\r\n     * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\r\n    P.toPrecision = function (sd, rm) {\r\n      if (sd != null) intCheck(sd, 1, MAX);\r\n      return format(this, sd, rm, 2);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in base b, or base 10 if b is\r\n     * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and\r\n     * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent\r\n     * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than\r\n     * TO_EXP_NEG, return exponential notation.\r\n     *\r\n     * [b] {number} Integer, 2 to ALPHABET.length inclusive.\r\n     *\r\n     * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n     */\r\n    P.toString = function (b) {\r\n      var str,\r\n        n = this,\r\n        s = n.s,\r\n        e = n.e;\r\n\r\n      // Infinity or NaN?\r\n      if (e === null) {\r\n        if (s) {\r\n          str = 'Infinity';\r\n          if (s < 0) str = '-' + str;\r\n        } else {\r\n          str = 'NaN';\r\n        }\r\n      } else {\r\n        if (b == null) {\r\n          str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n           ? toExponential(coeffToString(n.c), e)\r\n           : toFixedPoint(coeffToString(n.c), e, '0');\r\n        } else if (b === 10 && alphabetHasNormalDecimalDigits) {\r\n          n = round(new BigNumber(n), DECIMAL_PLACES + e + 1, ROUNDING_MODE);\r\n          str = toFixedPoint(coeffToString(n.c), n.e, '0');\r\n        } else {\r\n          intCheck(b, 2, ALPHABET.length, 'Base');\r\n          str = convertBase(toFixedPoint(coeffToString(n.c), e, '0'), 10, b, s, true);\r\n        }\r\n\r\n        if (s < 0 && n.c[0]) str = '-' + str;\r\n      }\r\n\r\n      return str;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return as toString, but do not accept a base argument, and include the minus sign for\r\n     * negative zero.\r\n     */\r\n    P.valueOf = P.toJSON = function () {\r\n      return valueOf(this);\r\n    };\r\n\r\n\r\n    P._isBigNumber = true;\r\n\r\n    if (configObject != null) BigNumber.set(configObject);\r\n\r\n    return BigNumber;\r\n  }\r\n\r\n\r\n  // PRIVATE HELPER FUNCTIONS\r\n\r\n  // These functions don't need access to variables,\r\n  // e.g. DECIMAL_PLACES, in the scope of the `clone` function above.\r\n\r\n\r\n  function bitFloor(n) {\r\n    var i = n | 0;\r\n    return n > 0 || n === i ? i : i - 1;\r\n  }\r\n\r\n\r\n  // Return a coefficient array as a string of base 10 digits.\r\n  function coeffToString(a) {\r\n    var s, z,\r\n      i = 1,\r\n      j = a.length,\r\n      r = a[0] + '';\r\n\r\n    for (; i < j;) {\r\n      s = a[i++] + '';\r\n      z = LOG_BASE - s.length;\r\n      for (; z--; s = '0' + s);\r\n      r += s;\r\n    }\r\n\r\n    // Determine trailing zeros.\r\n    for (j = r.length; r.charCodeAt(--j) === 48;);\r\n\r\n    return r.slice(0, j + 1 || 1);\r\n  }\r\n\r\n\r\n  // Compare the value of BigNumbers x and y.\r\n  function compare(x, y) {\r\n    var a, b,\r\n      xc = x.c,\r\n      yc = y.c,\r\n      i = x.s,\r\n      j = y.s,\r\n      k = x.e,\r\n      l = y.e;\r\n\r\n    // Either NaN?\r\n    if (!i || !j) return null;\r\n\r\n    a = xc && !xc[0];\r\n    b = yc && !yc[0];\r\n\r\n    // Either zero?\r\n    if (a || b) return a ? b ? 0 : -j : i;\r\n\r\n    // Signs differ?\r\n    if (i != j) return i;\r\n\r\n    a = i < 0;\r\n    b = k == l;\r\n\r\n    // Either Infinity?\r\n    if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;\r\n\r\n    // Compare exponents.\r\n    if (!b) return k > l ^ a ? 1 : -1;\r\n\r\n    j = (k = xc.length) < (l = yc.length) ? k : l;\r\n\r\n    // Compare digit by digit.\r\n    for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;\r\n\r\n    // Compare lengths.\r\n    return k == l ? 0 : k > l ^ a ? 1 : -1;\r\n  }\r\n\r\n\r\n  /*\r\n   * Check that n is a primitive number, an integer, and in range, otherwise throw.\r\n   */\r\n  function intCheck(n, min, max, name) {\r\n    if (n < min || n > max || n !== mathfloor(n)) {\r\n      throw Error\r\n       (bignumberError + (name || 'Argument') + (typeof n == 'number'\r\n         ? n < min || n > max ? ' out of range: ' : ' not an integer: '\r\n         : ' not a primitive number: ') + String(n));\r\n    }\r\n  }\r\n\r\n\r\n  // Assumes finite n.\r\n  function isOdd(n) {\r\n    var k = n.c.length - 1;\r\n    return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;\r\n  }\r\n\r\n\r\n  function toExponential(str, e) {\r\n    return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) +\r\n     (e < 0 ? 'e' : 'e+') + e;\r\n  }\r\n\r\n\r\n  function toFixedPoint(str, e, z) {\r\n    var len, zs;\r\n\r\n    // Negative exponent?\r\n    if (e < 0) {\r\n\r\n      // Prepend zeros.\r\n      for (zs = z + '.'; ++e; zs += z);\r\n      str = zs + str;\r\n\r\n    // Positive exponent\r\n    } else {\r\n      len = str.length;\r\n\r\n      // Append zeros.\r\n      if (++e > len) {\r\n        for (zs = z, e -= len; --e; zs += z);\r\n        str += zs;\r\n      } else if (e < len) {\r\n        str = str.slice(0, e) + '.' + str.slice(e);\r\n      }\r\n    }\r\n\r\n    return str;\r\n  }\r\n\r\n\r\n  // EXPORT\r\n\r\n\r\n  BigNumber = clone();\r\n  BigNumber['default'] = BigNumber.BigNumber = BigNumber;\r\n\r\n  // AMD.\r\n  if (typeof define == 'function' && define.amd) {\r\n    define(function () { return BigNumber; });\r\n\r\n  // Node.js and other environments that support module.exports.\r\n  } else if (typeof module != 'undefined' && module.exports) {\r\n    module.exports = BigNumber;\r\n\r\n  // Browser.\r\n  } else {\r\n    if (!globalObject) {\r\n      globalObject = typeof self != 'undefined' && self ? self : window;\r\n    }\r\n\r\n    globalObject.BigNumber = BigNumber;\r\n  }\r\n})(this);\r\n", "/**\n * Copyright (c) 2022 Signum Network\n */\nimport BigNumber from 'bignumber.js';\n\nBigNumber.config({\n    EXPONENTIAL_AT: [-9, 20],\n    DECIMAL_PLACES: 8\n});\n\n/**\n * Structure to determine the representation format of [ChainValue] string\n *\n * @category value-objects\n */\nexport interface ChainValueFormat {\n    /**\n     * Decimal separator, Default: '.'\n     */\n    decimalSeparator: string;\n    /**\n     * grouping separator of the integer part, Default: ','\n     */\n    groupSeparator: string;\n    /**\n     * Primary grouping size of the integer part, Default: 3\n     */\n    groupSize: number;\n    /**\n     * Secondary grouping size of the integer part, Default 0\n     */\n    secondaryGroupSize: number;\n    /**\n     * Grouping separator of the fraction part, Default: ''\n     */\n    fractionGroupSeparator: string;\n    /**\n     * Grouping size of the fraction part, Default: 0\n     */\n    fractionGroupSize: number;\n    /**\n     * String to append, Default: ''\n     */\n    suffix: string;\n}\n\n\n/**\n * Amount formatting preset for dot decimal formatting '1,000,000.123456'\n * \n */\nconst FormatDotDecimal: ChainValueFormat = {\n    decimalSeparator: '.',\n    groupSeparator: ',',\n    groupSize: 3,\n    secondaryGroupSize: 0,\n    fractionGroupSeparator: '',\n    fractionGroupSize: 0,\n    suffix: ''\n};\n\n/**\n * Amount formatting preset for comma decimal formatting '1.000.000,123456'\n * \n */\nconst FormatCommaDecimal: ChainValueFormat = {\n    decimalSeparator: ',',\n    groupSeparator: '.',\n    groupSize: 3,\n    secondaryGroupSize: 0,\n    fractionGroupSeparator: '',\n    fractionGroupSize: 0,\n    suffix: ''\n};\n\n/**\n * Amount formatting presets, see {@link ChainValue.toFormat}\n *\n * @category value-objects\n */\nexport const ChainValueFormats = {\n    /**\n     * 1,000,000.123456\n     */\n    DotDecimal: FormatDotDecimal,\n    /**\n     * 1.000.000,123456\n     */\n    CommaDecimal: FormatCommaDecimal\n};\n\nfunction assureValidValue(v: string): void {\n    if (!(v && /^-?\\d*(\\.\\d+)?$/.test(v))) {\n        throw new Error(`Invalid value: ${v}`);\n    }\n}\n\n/**\n * A Value Object to facilitate calculations for token and coin values (QNT/NQT).\n *\n *\n * For efficiency reasons, the monetary values/quantities are stored as integers with a prefined set of decimals,\n * e.g. Signa has 8 decimals and stores the values as Planck that is 1 Signa = 100_000_000 Planck (NQT)\n * and tokens have configurable decimals (0 to 8), so that a custom FooCoin can hav 2 decimals only where 1 FOO = 100 FOOQNT\n *\n * In this context integer quantities are denominates as __atomic_ values and\n * fractional values considering the decimals are denominated as _compound_ values.\n *\n *\n * Note: This class uses a big number representation (ES5 compatible) under the hood, so\n * number limits and numeric calculations are much more precise than JS number type\n *\n * @category value-objects\n */\nexport class ChainValue {\n\n    private _big: BigNumber;\n    private readonly _decimals: number;\n\n    /**\n     * Constructs a value object instance for calculations. The initial value is 0;\n     * @param decimals The number of decimals of the amount. Must be between 0 and 8\n     */\n    public constructor(decimals: number) {\n        if (decimals < 0 || decimals > 8) {\n            throw new Error('Decimals must be between 0 and 8');\n        }\n        this._big = new BigNumber(0);\n        this._decimals = decimals;\n    }\n\n    /**\n     * Constructs a value object instance for calculations. The initial value is 0;\n     * @param decimals The number of decimals of the amount. Must be between 0 and 8\n     */\n    public static create(decimals: number) {\n        return new ChainValue(decimals);\n    }\n\n    /**\n     * @return The set decimals amount\n     */\n    getDecimals(): number {\n        return this._decimals;\n    }\n\n    /**\n     * Leaky value getter\n     * @return the underlying value in its big number representation (immutable)\n     */\n    getRaw(): BigNumber {\n        return this._big;\n    }\n\n    /**\n     * @return Gets Atomic representation\n     */\n    getAtomic(): string {\n        return this._big.dp(0).toString();\n    }\n\n    /**\n     * Sets value as atomic value, i.e. overwrites current hold value\n     * @param a The atomic value. Float numbers are floored to first lower integer, i.e. `1.23` -> `1`\n     * @return the updated value object\n     */\n    setAtomic(a: number | string): ChainValue {\n        if (typeof (a) === 'number') {\n            this._big = new BigNumber(Math.floor(a));\n        } else {\n            assureValidValue(a);\n            this._big = new BigNumber(a);\n        }\n        return this;\n    }\n\n    /**\n     * Gets the _'compound'_ representation\n     * @return value in decimal related representation, i.e. 100 QNT with 3 decimals results in `'0.3'`\n     */\n    getCompound(): string {\n        return this._big.dividedBy(10 ** this._decimals).dp(this._decimals).toString();\n    }\n\n    /**\n     * Sets as _'compound'_ representation\n     * @param c compound value\n     * @return the updated value object\n     */\n    setCompound(c: string | number): ChainValue {\n        if (typeof (c) === 'string') {\n            assureValidValue(c);\n        }\n        this._big = new BigNumber(c || 0).multipliedBy(10 ** this._decimals);\n        return this;\n    }\n\n    /**\n     * Checks for equality\n     * @param value The other value to be compared\n     * @return true if equal, otherwise false\n     */\n    public equals(value: ChainValue): boolean {\n        return this._big.eq(value._big);\n    }\n\n    /**\n     * Checks for lesser or equality\n     * @param chainValue The other value to be compared\n     * @return true if less or equal, otherwise false\n     */\n    public lessOrEqual(chainValue: ChainValue): boolean {\n        return this._big.lte(chainValue._big);\n    }\n\n    /**\n     * Checks for lesser value\n     * @param chainValue The other value to be compared\n     * @return true if less, otherwise false\n     */\n    public less(chainValue: ChainValue): boolean {\n        return this._big.lt(chainValue._big);\n    }\n\n    /**\n     * Checks for greater or equality value\n     * @param chainValue The other value to be compared\n     * @return true if greater or equal, otherwise false\n     */\n    public greaterOrEqual(chainValue: ChainValue): boolean {\n        return this._big.gte(chainValue._big);\n    }\n\n    /**\n     * Checks for greater value\n     * @param chainValue The other value to be compared\n     * @return true if greater, otherwise false\n     */\n    public greater(chainValue: ChainValue): boolean {\n        return this._big.gt(chainValue._big);\n    }\n\n    /**\n     * Adds another value to this value\n     * @param chainValue The other value to be added\n     * @return the _mutated_ value object\n     */\n    public add(chainValue: ChainValue): ChainValue {\n        this._big = this._big.plus(chainValue._big);\n        return this;\n    }\n\n    /**\n     * Subtracts another value from this value\n     * @param chainValue The other value to be subtracted\n     * @return the _mutated_ value object\n     */\n    public subtract(chainValue: ChainValue): ChainValue {\n        this._big = this._big.minus(chainValue._big);\n        return this;\n    }\n\n    /**\n     * Multiplies this value object with a _numeric_ value (not ChainValue!)\n     * @param value A numeric value to be multiplied with\n     * @return the _mutated_ value object\n     */\n    public multiply(value: number | string): ChainValue {\n        let v = value;\n        if (typeof (value) === 'string') {\n            assureValidValue(value);\n            v = parseFloat(value);\n        }\n        this._big = this._big.multipliedBy(v);\n        return this;\n    }\n\n    /**\n     * Divides this value object with a _numeric_ value (not ChainValue!)\n     * @param value A numeric value to be divided by\n     * @return the _mutated_ value object\n     */\n    public divide(value: number | string): ChainValue {\n        let v = value;\n        if (typeof (value) === 'string') {\n            assureValidValue(value);\n            v = parseFloat(value);\n        }\n        if (v === 0) {\n            throw new Error('Division by zero');\n        }\n        this._big = this._big.div(v);\n        return this;\n    }\n\n    /**\n     * Gets a string representation according to {@link ChainValueFormat}\n     * @param prefix The prefix for value\n     * @param format The format object, Default: {@link ChainValueFormats.DotDecimal}\n     * @return The formatted string\n     */\n    public toFormat(prefix: string, format: ChainValueFormat = ChainValueFormats.DotDecimal): string {\n        return this._big.dividedBy(10 ** this._decimals).toFormat({...format, prefix});\n    }\n\n    /**\n     * Clones/Copies the current ChainValue to a new object\n     * @return new ChainValue instance\n     */\n    public clone(): ChainValue {\n        const newValue = new ChainValue(this._decimals);\n        newValue._big = this._big;\n        return newValue;\n    }\n}\n", "/**\n * Symbol/Character for currency unit\n * @deprecated Due to Multiverse feature it's not recommended to use this hard coded stuff.\n *\n * */\nexport const CurrencySymbol = '\uA7A8';\n\n/**\n * The smallest possible fee\n * \n */\nexport const FeeQuantPlanck = 1000000;\n\n/**\n * One SIGNA expressed in Planck\n * \n */\nexport const OneSignaPlanck = 100000000;\n", "/**\n * Original work Copyright (c) 2020 Burst Apps Team\n * Modified work Copyright (c) 2022 Signum Network\n */\nimport BigNumber from 'bignumber.js';\nimport {CurrencySymbol} from './constants';\nimport {ChainValue} from './chainValue';\n\n/**\n * Structure to determine the representation format of [Amount] string\n *\n * @category value-objects\n */\nexport interface AmountFormat {\n    /**\n     * string to prepend, Default: CurrencySymbol\n     */\n    prefix: string;\n    /**\n     * Decimal separator, Default: '.'\n     */\n    decimalSeparator: string;\n    /**\n     * grouping separator of the integer part, Default: ','\n     */\n    groupSeparator: string;\n    /**\n     * Primary grouping size of the integer part, Default: 3\n     */\n    groupSize: number;\n    /**\n     * Secondary grouping size of the integer part, Default 0\n     */\n    secondaryGroupSize: number;\n    /**\n     * Grouping separator of the fraction part, Default: ''\n     */\n    fractionGroupSeparator: string;\n    /**\n     * Grouping size of the fraction part, Default: 0\n     */\n    fractionGroupSize: number;\n    /**\n     * String to append, Default: ''\n     */\n    suffix: string;\n}\n\n\n/**\n * Amount formatting preset for dot decimal formatting 'Ꞩ 1,000,000.123456'\n *\n * @category value-objects\n */\nexport const FormatDotDecimal: AmountFormat = {\n    prefix: CurrencySymbol + ' ',\n    decimalSeparator: '.',\n    groupSeparator: ',',\n    groupSize: 3,\n    secondaryGroupSize: 0,\n    fractionGroupSeparator: '',\n    fractionGroupSize: 0,\n    suffix: ''\n};\n\n/**\n * Amount formatting preset for comma decimal formatting 'Ꞩ 1.000.000,123456'\n *\n * @category value-objects\n */\nexport const FormatCommaDecimal: AmountFormat = {\n    prefix: CurrencySymbol + ' ',\n    decimalSeparator: ',',\n    groupSeparator: '.',\n    groupSize: 3,\n    secondaryGroupSize: 0,\n    fractionGroupSeparator: '',\n    fractionGroupSize: 0,\n    suffix: ''\n};\n\n/**\n * Amount formatting presets, see {@link Amount.toString}\n *\n * @category value-objects\n */\nexport const AmountFormats = {\n    /**\n     * 1,000,000.123456\n     */\n    DotDecimal: FormatDotDecimal,\n    /**\n     * 1.000.000,123456\n     */\n    CommaDecimal: FormatCommaDecimal\n};\n\n/**\n * A Value Object to facilitate SIGNA and Planck conversions/calculations.\n *\n * This class is a convenient wrapper around {@link ChainValue} with `decimals = 8`\n *\n * Note: This class uses a big number representation (ES5 compatible) under the hood, so\n * number limits and numeric calculations are much more precise than JS number type\n *\n * @category value-objects\n */\nexport class Amount {\n    private readonly _value: ChainValue;\n\n    private constructor(planck: number | string) {\n        this._value = new ChainValue(8).setAtomic(planck);\n    }\n\n    /**\n     * @return The Signa Currency Symbol\n     * @deprecated Due to Multiverse feature it's not recommended to use this hard coded stuff.\n     * \n     */\n    public static CurrencySymbol(): string {\n        return CurrencySymbol;\n    }\n\n    /**\n     * Same as `Amount.fromPlanck(0)` or `Amount.fromSigna(0)`\n     */\n    public static Zero(): Amount {\n        return new Amount(0);\n    }\n\n    /**\n     * Creates a Burst Value object from Planck\n     * @param planck The value in Planck\n     */\n    public static fromPlanck(planck: number | string): Amount {\n        return new Amount(planck);\n    }\n\n    /**\n     * Creates a Value object from SIGNA\n     * @param signa The value in SIGNA\n     */\n    public static fromSigna(signa: number | string): Amount {\n        const b = new Amount('0');\n        b.setSigna(typeof signa === 'number' ? signa.toString(10) : signa);\n        return b;\n    }\n\n    /**\n     * Leaky value getter\n     * @return the underlying value in its big number representation (immutable)\n     */\n    getRaw(): BigNumber {\n        return this._value.getRaw();\n    }\n\n    /**\n     * @return Gets Planck representation\n     */\n    getPlanck(): string {\n        return this._value.getAtomic();\n    }\n\n    /**\n     * Sets value as Planck, i.e. overwrites current hold value\n     * @param p The planck value\n     * @return This value object\n     */\n    setPlanck(p: string): Amount {\n        this._value.setAtomic(p);\n        return this;\n    }\n\n    /**\n     * Gets SIGNA representation\n     * @return value in SIGNA\n     */\n    getSigna(): string {\n        return this._value.getCompound();\n    }\n\n    /**\n     * Sets value as SIGNA, i.e. overwrites current hold value\n     * @param b value in SIGNA\n     * @return This value object\n     */\n    setSigna(b: string): Amount {\n        this._value.setCompound(b);\n        return this;\n    }\n\n    /**\n     * Checks for equality\n     * @param amount The other value to be compared\n     * @return true if equal, otherwise false\n     */\n    public equals(amount: Amount): boolean {\n        return this._value.equals(amount._value);\n    }\n\n    /**\n     * Checks for lesser or equality\n     * @param amount The other value to be compared\n     * @return true if less or equal, otherwise false\n     */\n    public lessOrEqual(amount: Amount): boolean {\n        return this._value.lessOrEqual(amount._value);\n    }\n\n    /**\n     * Checks for lesser value\n     * @param amount The other value to be compared\n     * @return true if less, otherwise false\n     */\n    public less(amount: Amount): boolean {\n        return this._value.less(amount._value);\n    }\n\n    /**\n     * Checks for greater or equality value\n     * @param amount The other value to be compared\n     * @return true if greater or equal, otherwise false\n     */\n    public greaterOrEqual(amount: Amount): boolean {\n        return this._value.greaterOrEqual(amount._value);\n    }\n\n    /**\n     * Checks for greater value\n     * @param amount The other value to be compared\n     * @return true if greater, otherwise false\n     */\n    public greater(amount: Amount): boolean {\n        return this._value.greater(amount._value);\n    }\n\n    /**\n     * Adds two values\n     * @param amount The other value to be added\n     * @return the _mutated_ Amount object\n     */\n    public add(amount: Amount): Amount {\n        this._value.add(amount._value);\n        return this;\n    }\n\n    /**\n     * Subtracts from value\n     * @param amount The other value to be subtracted\n     * @return the _mutated_ Amount object\n     */\n    public subtract(amount: Amount): Amount {\n        this._value.subtract(amount._value);\n        return this;\n    }\n\n    /**\n     * Multiplies with a _numeric_ value (not Amount)\n     * @param value A numeric value to be multiplied with\n     * @return the _mutated_ Amount object\n     */\n    public multiply(value: number): Amount {\n        this._value.multiply(value);\n        return this;\n    }\n\n    /**\n     * Divides by a _numeric_ value (not Amount)\n     * @param value A numeric value to be divided by\n     * @return the _mutated_ Amount object\n     */\n    public divide(value: number): Amount {\n        this._value.divide(value);\n        return this;\n    }\n\n    /**\n     * Gets a string representation in form `Ꞩ 100`\n     * @param format The format object, Default: {@link AmountFormats.DotDecimal}\n     * @return The formatted string\n     */\n    public toString(format: AmountFormat = AmountFormats.DotDecimal): string {\n        return this._value.toFormat(format.prefix, format);\n    }\n\n    /**\n     * Clones/Copies the current Amount to a new object\n     * @return new Amount instance\n     */\n    public clone(): Amount {\n        return Amount.fromPlanck(this.getPlanck());\n    }\n}\n", "/**\n * The utility package for SignumJS, with loads of convenience and conversion methods\n *\n * @module util\n */\nexport * from './asyncRetry';\nexport * from './chainTime';\nexport * from './chainValue';\nexport * from './amount';\nexport * from './constants';\nexport * from './convertBase36StringToHexString';\nexport * from './convertBase64StringToString';\nexport * from './convertByteArrayToHexString';\nexport * from './convertByteArrayToString';\nexport * from './convertDecStringToHexString';\nexport * from './convertHexEndianess';\nexport * from './convertHexStringToBase36String';\nexport * from './convertHexStringToByteArray';\nexport * from './convertHexStringToDecString';\nexport * from './convertHexStringToString';\nexport * from './convertStringToBase64String';\nexport * from './convertStringToByteArray';\nexport * from './convertStringToHexString';\nexport * from './convertAssetPriceToPlanck';\nexport * from './convertPlanckToAssetPrice';\nexport * from './typings';\n", "/**\n * Original work Copyright (c) 2021 Burst Apps Team\n */\nimport {AsyncRetryArgs} from './typings';\n\n/**\n * Utility function to retry async functions.\n *\n * @param args The argument object*\n * \n */\nexport async function asyncRetry<T>(args: AsyncRetryArgs<T>): Promise<T> {\n    const {asyncFn, onFailureAsync, retryCount = 1, maxRetrials = 20} = args;\n    try {\n        return await asyncFn();\n    // @ts-ignore\n    } catch (e: any) {\n        if (retryCount > maxRetrials) {\n            throw e; // cannot recover\n        }\n        const shouldRetry = await onFailureAsync(e, retryCount);\n        if (shouldRetry) {\n            await asyncRetry({asyncFn, onFailureAsync, retryCount: retryCount + 1});\n        } else {\n            throw e; // rethrow most recent error\n        }\n    }\n}\n\n", "/**\n * Original work Copyright (c) 2020 Burst Apps Team\n * Modfied work Copyright (c) 2021 Signum Network\n */\n\n\nconst GenesisBlockTime = Date.UTC(2014, 7, 11, 2, 0, 0, 0) / 1000;\n\n/**\n * A Value Object to facilitate Chain Timestamp conversions.\n *\n * @category value-objects\n */\nexport class ChainTime {\n\n    private _chainTimestamp: number;\n\n    private constructor(blockTimestamp: number) {\n        this._chainTimestamp = blockTimestamp;\n    }\n\n    /**\n     * Creates a Block Time object from Chain Time Stamp\n     * @param timestamp The timestamp from Chain\n     */\n    public static fromChainTimestamp(timestamp: number): ChainTime {\n        return new ChainTime(timestamp);\n    }\n\n    /**\n     * Creates a Block Time object from Date\n     * @param date Any Date object\n     */\n    public static fromDate(date: Date): ChainTime {\n        const blockTime = new ChainTime(0);\n        blockTime.setDate(date);\n        return blockTime;\n    }\n\n    /**\n     * @return Gets Chain Timestamp representation\n     */\n    getChainTimestamp(): number {\n        return this._chainTimestamp;\n    }\n\n    /**\n     * Sets ChainTime using Chain Timestamp\n     */\n    setChainTimestamp(blockTimestamp: number): void {\n        this._chainTimestamp = blockTimestamp;\n    }\n\n    /**\n     * @return Time in seconds since 01.01.1970\n     */\n    getEpoch(): number {\n        return (GenesisBlockTime + this._chainTimestamp) * 1000;\n    }\n\n    /**\n     * @return real Date representation\n     */\n    getDate(): Date {\n        return new Date(this.getEpoch());\n    }\n\n    /**\n     * Sets blockTime using native Date\n     * @param date Any Date object\n     */\n    setDate(date: Date): void {\n        this._chainTimestamp = Math.round(date.getTime() / 1000) - GenesisBlockTime;\n    }\n\n    /**\n     * Checks for equality\n     * @param chainTime The other value to be compared\n     * @return true if equal, otherwise false\n     */\n    public equals(chainTime: ChainTime): boolean {\n        return this._chainTimestamp === chainTime._chainTimestamp;\n    }\n\n    /**\n     * Checks if a chainTime is before a given one\n     * @param chainTime The other value to be compared\n     * @return true if _before_ a given chainTime, otherwise false\n     */\n    public before(chainTime: ChainTime): boolean {\n        return this._chainTimestamp < chainTime._chainTimestamp;\n    }\n\n    /**\n     * Checks if a chainTime is after a given one\n     * @param chainTime The other value to be compared\n     * @return true if _after_ a given chainTime, otherwise false\n     */\n    public after(chainTime: ChainTime): boolean {\n        return this._chainTimestamp > chainTime._chainTimestamp;\n    }\n\n}\n", "/*\r\n *      bignumber.js v9.1.2\r\n *      A JavaScript library for arbitrary-precision arithmetic.\r\n *      https://github.com/MikeMcl/bignumber.js\r\n *      Copyright (c) 2022 Michael Mclaughlin <M8ch88l@gmail.com>\r\n *      MIT Licensed.\r\n *\r\n *      BigNumber.prototype methods     |  BigNumber methods\r\n *                                      |\r\n *      absoluteValue            abs    |  clone\r\n *      comparedTo                      |  config               set\r\n *      decimalPlaces            dp     |      DECIMAL_PLACES\r\n *      dividedBy                div    |      ROUNDING_MODE\r\n *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT\r\n *      exponentiatedBy          pow    |      RANGE\r\n *      integerValue                    |      CRYPTO\r\n *      isEqualTo                eq     |      MODULO_MODE\r\n *      isFinite                        |      POW_PRECISION\r\n *      isGreaterThan            gt     |      FORMAT\r\n *      isGreaterThanOrEqualTo   gte    |      ALPHABET\r\n *      isInteger                       |  isBigNumber\r\n *      isLessThan               lt     |  maximum              max\r\n *      isLessThanOrEqualTo      lte    |  minimum              min\r\n *      isNaN                           |  random\r\n *      isNegative                      |  sum\r\n *      isPositive                      |\r\n *      isZero                          |\r\n *      minus                           |\r\n *      modulo                   mod    |\r\n *      multipliedBy             times  |\r\n *      negated                         |\r\n *      plus                            |\r\n *      precision                sd     |\r\n *      shiftedBy                       |\r\n *      squareRoot               sqrt   |\r\n *      toExponential                   |\r\n *      toFixed                         |\r\n *      toFormat                        |\r\n *      toFraction                      |\r\n *      toJSON                          |\r\n *      toNumber                        |\r\n *      toPrecision                     |\r\n *      toString                        |\r\n *      valueOf                         |\r\n *\r\n */\r\n\r\n\r\nvar\r\n  isNumeric = /^-?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?$/i,\r\n  mathceil = Math.ceil,\r\n  mathfloor = Math.floor,\r\n\r\n  bignumberError = '[BigNumber Error] ',\r\n  tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ',\r\n\r\n  BASE = 1e14,\r\n  LOG_BASE = 14,\r\n  MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1\r\n  // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1\r\n  POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],\r\n  SQRT_BASE = 1e7,\r\n\r\n  // EDITABLE\r\n  // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and\r\n  // the arguments to toExponential, toFixed, toFormat, and toPrecision.\r\n  MAX = 1E9;                                   // 0 to MAX_INT32\r\n\r\n\r\n/*\r\n * Create and return a BigNumber constructor.\r\n */\r\nfunction clone(configObject) {\r\n  var div, convertBase, parseNumeric,\r\n    P = BigNumber.prototype = { constructor: BigNumber, toString: null, valueOf: null },\r\n    ONE = new BigNumber(1),\r\n\r\n\r\n    //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------\r\n\r\n\r\n    // The default values below must be integers within the inclusive ranges stated.\r\n    // The values can also be changed at run-time using BigNumber.set.\r\n\r\n    // The maximum number of decimal places for operations involving division.\r\n    DECIMAL_PLACES = 20,                     // 0 to MAX\r\n\r\n    // The rounding mode used when rounding to the above decimal places, and when using\r\n    // toExponential, toFixed, toFormat and toPrecision, and round (default value).\r\n    // UP         0 Away from zero.\r\n    // DOWN       1 Towards zero.\r\n    // CEIL       2 Towards +Infinity.\r\n    // FLOOR      3 Towards -Infinity.\r\n    // HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n    // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n    // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n    // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n    // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n    ROUNDING_MODE = 4,                       // 0 to 8\r\n\r\n    // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]\r\n\r\n    // The exponent value at and beneath which toString returns exponential notation.\r\n    // Number type: -7\r\n    TO_EXP_NEG = -7,                         // 0 to -MAX\r\n\r\n    // The exponent value at and above which toString returns exponential notation.\r\n    // Number type: 21\r\n    TO_EXP_POS = 21,                         // 0 to MAX\r\n\r\n    // RANGE : [MIN_EXP, MAX_EXP]\r\n\r\n    // The minimum exponent value, beneath which underflow to zero occurs.\r\n    // Number type: -324  (5e-324)\r\n    MIN_EXP = -1e7,                          // -1 to -MAX\r\n\r\n    // The maximum exponent value, above which overflow to Infinity occurs.\r\n    // Number type:  308  (1.7976931348623157e+308)\r\n    // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.\r\n    MAX_EXP = 1e7,                           // 1 to MAX\r\n\r\n    // Whether to use cryptographically-secure random number generation, if available.\r\n    CRYPTO = false,                          // true or false\r\n\r\n    // The modulo mode used when calculating the modulus: a mod n.\r\n    // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\r\n    // The remainder (r) is calculated as: r = a - n * q.\r\n    //\r\n    // UP        0 The remainder is positive if the dividend is negative, else is negative.\r\n    // DOWN      1 The remainder has the same sign as the dividend.\r\n    //             This modulo mode is commonly known as 'truncated division' and is\r\n    //             equivalent to (a % n) in JavaScript.\r\n    // FLOOR     3 The remainder has the same sign as the divisor (Python %).\r\n    // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.\r\n    // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).\r\n    //             The remainder is always positive.\r\n    //\r\n    // The truncated division, floored division, Euclidian division and IEEE 754 remainder\r\n    // modes are commonly used for the modulus operation.\r\n    // Although the other rounding modes can also be used, they may not give useful results.\r\n    MODULO_MODE = 1,                         // 0 to 9\r\n\r\n    // The maximum number of significant digits of the result of the exponentiatedBy operation.\r\n    // If POW_PRECISION is 0, there will be unlimited significant digits.\r\n    POW_PRECISION = 0,                       // 0 to MAX\r\n\r\n    // The format specification used by the BigNumber.prototype.toFormat method.\r\n    FORMAT = {\r\n      prefix: '',\r\n      groupSize: 3,\r\n      secondaryGroupSize: 0,\r\n      groupSeparator: ',',\r\n      decimalSeparator: '.',\r\n      fractionGroupSize: 0,\r\n      fractionGroupSeparator: '\\xA0',        // non-breaking space\r\n      suffix: ''\r\n    },\r\n\r\n    // The alphabet used for base conversion. It must be at least 2 characters long, with no '+',\r\n    // '-', '.', whitespace, or repeated character.\r\n    // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'\r\n    ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz',\r\n    alphabetHasNormalDecimalDigits = true;\r\n\r\n\r\n  //------------------------------------------------------------------------------------------\r\n\r\n\r\n  // CONSTRUCTOR\r\n\r\n\r\n  /*\r\n   * The BigNumber constructor and exported function.\r\n   * Create and return a new instance of a BigNumber object.\r\n   *\r\n   * v {number|string|BigNumber} A numeric value.\r\n   * [b] {number} The base of v. Integer, 2 to ALPHABET.length inclusive.\r\n   */\r\n  function BigNumber(v, b) {\r\n    var alphabet, c, caseChanged, e, i, isNum, len, str,\r\n      x = this;\r\n\r\n    // Enable constructor call without `new`.\r\n    if (!(x instanceof BigNumber)) return new BigNumber(v, b);\r\n\r\n    if (b == null) {\r\n\r\n      if (v && v._isBigNumber === true) {\r\n        x.s = v.s;\r\n\r\n        if (!v.c || v.e > MAX_EXP) {\r\n          x.c = x.e = null;\r\n        } else if (v.e < MIN_EXP) {\r\n          x.c = [x.e = 0];\r\n        } else {\r\n          x.e = v.e;\r\n          x.c = v.c.slice();\r\n        }\r\n\r\n        return;\r\n      }\r\n\r\n      if ((isNum = typeof v == 'number') && v * 0 == 0) {\r\n\r\n        // Use `1 / n` to handle minus zero also.\r\n        x.s = 1 / v < 0 ? (v = -v, -1) : 1;\r\n\r\n        // Fast path for integers, where n < 2147483648 (2**31).\r\n        if (v === ~~v) {\r\n          for (e = 0, i = v; i >= 10; i /= 10, e++);\r\n\r\n          if (e > MAX_EXP) {\r\n            x.c = x.e = null;\r\n          } else {\r\n            x.e = e;\r\n            x.c = [v];\r\n          }\r\n\r\n          return;\r\n        }\r\n\r\n        str = String(v);\r\n      } else {\r\n\r\n        if (!isNumeric.test(str = String(v))) return parseNumeric(x, str, isNum);\r\n\r\n        x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;\r\n      }\r\n\r\n      // Decimal point?\r\n      if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n\r\n      // Exponential form?\r\n      if ((i = str.search(/e/i)) > 0) {\r\n\r\n        // Determine exponent.\r\n        if (e < 0) e = i;\r\n        e += +str.slice(i + 1);\r\n        str = str.substring(0, i);\r\n      } else if (e < 0) {\r\n\r\n        // Integer.\r\n        e = str.length;\r\n      }\r\n\r\n    } else {\r\n\r\n      // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n      intCheck(b, 2, ALPHABET.length, 'Base');\r\n\r\n      // Allow exponential notation to be used with base 10 argument, while\r\n      // also rounding to DECIMAL_PLACES as with other bases.\r\n      if (b == 10 && alphabetHasNormalDecimalDigits) {\r\n        x = new BigNumber(v);\r\n        return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);\r\n      }\r\n\r\n      str = String(v);\r\n\r\n      if (isNum = typeof v == 'number') {\r\n\r\n        // Avoid potential interpretation of Infinity and NaN as base 44+ values.\r\n        if (v * 0 != 0) return parseNumeric(x, str, isNum, b);\r\n\r\n        x.s = 1 / v < 0 ? (str = str.slice(1), -1) : 1;\r\n\r\n        // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n        if (BigNumber.DEBUG && str.replace(/^0\\.0*|\\./, '').length > 15) {\r\n          throw Error\r\n           (tooManyDigits + v);\r\n        }\r\n      } else {\r\n        x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;\r\n      }\r\n\r\n      alphabet = ALPHABET.slice(0, b);\r\n      e = i = 0;\r\n\r\n      // Check that str is a valid base b number.\r\n      // Don't use RegExp, so alphabet can contain special characters.\r\n      for (len = str.length; i < len; i++) {\r\n        if (alphabet.indexOf(c = str.charAt(i)) < 0) {\r\n          if (c == '.') {\r\n\r\n            // If '.' is not the first character and it has not be found before.\r\n            if (i > e) {\r\n              e = len;\r\n              continue;\r\n            }\r\n          } else if (!caseChanged) {\r\n\r\n            // Allow e.g. hexadecimal 'FF' as well as 'ff'.\r\n            if (str == str.toUpperCase() && (str = str.toLowerCase()) ||\r\n                str == str.toLowerCase() && (str = str.toUpperCase())) {\r\n              caseChanged = true;\r\n              i = -1;\r\n              e = 0;\r\n              continue;\r\n            }\r\n          }\r\n\r\n          return parseNumeric(x, String(v), isNum, b);\r\n        }\r\n      }\r\n\r\n      // Prevent later check for length on converted number.\r\n      isNum = false;\r\n      str = convertBase(str, b, 10, x.s);\r\n\r\n      // Decimal point?\r\n      if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n      else e = str.length;\r\n    }\r\n\r\n    // Determine leading zeros.\r\n    for (i = 0; str.charCodeAt(i) === 48; i++);\r\n\r\n    // Determine trailing zeros.\r\n    for (len = str.length; str.charCodeAt(--len) === 48;);\r\n\r\n    if (str = str.slice(i, ++len)) {\r\n      len -= i;\r\n\r\n      // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n      if (isNum && BigNumber.DEBUG &&\r\n        len > 15 && (v > MAX_SAFE_INTEGER || v !== mathfloor(v))) {\r\n          throw Error\r\n           (tooManyDigits + (x.s * v));\r\n      }\r\n\r\n       // Overflow?\r\n      if ((e = e - i - 1) > MAX_EXP) {\r\n\r\n        // Infinity.\r\n        x.c = x.e = null;\r\n\r\n      // Underflow?\r\n      } else if (e < MIN_EXP) {\r\n\r\n        // Zero.\r\n        x.c = [x.e = 0];\r\n      } else {\r\n        x.e = e;\r\n        x.c = [];\r\n\r\n        // Transform base\r\n\r\n        // e is the base 10 exponent.\r\n        // i is where to slice str to get the first element of the coefficient array.\r\n        i = (e + 1) % LOG_BASE;\r\n        if (e < 0) i += LOG_BASE;  // i < 1\r\n\r\n        if (i < len) {\r\n          if (i) x.c.push(+str.slice(0, i));\r\n\r\n          for (len -= LOG_BASE; i < len;) {\r\n            x.c.push(+str.slice(i, i += LOG_BASE));\r\n          }\r\n\r\n          i = LOG_BASE - (str = str.slice(i)).length;\r\n        } else {\r\n          i -= len;\r\n        }\r\n\r\n        for (; i--; str += '0');\r\n        x.c.push(+str);\r\n      }\r\n    } else {\r\n\r\n      // Zero.\r\n      x.c = [x.e = 0];\r\n    }\r\n  }\r\n\r\n\r\n  // CONSTRUCTOR PROPERTIES\r\n\r\n\r\n  BigNumber.clone = clone;\r\n\r\n  BigNumber.ROUND_UP = 0;\r\n  BigNumber.ROUND_DOWN = 1;\r\n  BigNumber.ROUND_CEIL = 2;\r\n  BigNumber.ROUND_FLOOR = 3;\r\n  BigNumber.ROUND_HALF_UP = 4;\r\n  BigNumber.ROUND_HALF_DOWN = 5;\r\n  BigNumber.ROUND_HALF_EVEN = 6;\r\n  BigNumber.ROUND_HALF_CEIL = 7;\r\n  BigNumber.ROUND_HALF_FLOOR = 8;\r\n  BigNumber.EUCLID = 9;\r\n\r\n\r\n  /*\r\n   * Configure infrequently-changing library-wide settings.\r\n   *\r\n   * Accept an object with the following optional properties (if the value of a property is\r\n   * a number, it must be an integer within the inclusive range stated):\r\n   *\r\n   *   DECIMAL_PLACES   {number}           0 to MAX\r\n   *   ROUNDING_MODE    {number}           0 to 8\r\n   *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]\r\n   *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]\r\n   *   CRYPTO           {boolean}          true or false\r\n   *   MODULO_MODE      {number}           0 to 9\r\n   *   POW_PRECISION       {number}           0 to MAX\r\n   *   ALPHABET         {string}           A string of two or more unique characters which does\r\n   *                                       not contain '.'.\r\n   *   FORMAT           {object}           An object with some of the following properties:\r\n   *     prefix                 {string}\r\n   *     groupSize              {number}\r\n   *     secondaryGroupSize     {number}\r\n   *     groupSeparator         {string}\r\n   *     decimalSeparator       {string}\r\n   *     fractionGroupSize      {number}\r\n   *     fractionGroupSeparator {string}\r\n   *     suffix                 {string}\r\n   *\r\n   * (The values assigned to the above FORMAT object properties are not checked for validity.)\r\n   *\r\n   * E.g.\r\n   * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })\r\n   *\r\n   * Ignore properties/parameters set to null or undefined, except for ALPHABET.\r\n   *\r\n   * Return an object with the properties current values.\r\n   */\r\n  BigNumber.config = BigNumber.set = function (obj) {\r\n    var p, v;\r\n\r\n    if (obj != null) {\r\n\r\n      if (typeof obj == 'object') {\r\n\r\n        // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.\r\n        // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'\r\n        if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {\r\n          v = obj[p];\r\n          intCheck(v, 0, MAX, p);\r\n          DECIMAL_PLACES = v;\r\n        }\r\n\r\n        // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.\r\n        // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n        if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {\r\n          v = obj[p];\r\n          intCheck(v, 0, 8, p);\r\n          ROUNDING_MODE = v;\r\n        }\r\n\r\n        // EXPONENTIAL_AT {number|number[]}\r\n        // Integer, -MAX to MAX inclusive or\r\n        // [integer -MAX to 0 inclusive, 0 to MAX inclusive].\r\n        // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'\r\n        if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {\r\n          v = obj[p];\r\n          if (v && v.pop) {\r\n            intCheck(v[0], -MAX, 0, p);\r\n            intCheck(v[1], 0, MAX, p);\r\n            TO_EXP_NEG = v[0];\r\n            TO_EXP_POS = v[1];\r\n          } else {\r\n            intCheck(v, -MAX, MAX, p);\r\n            TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);\r\n          }\r\n        }\r\n\r\n        // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or\r\n        // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].\r\n        // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'\r\n        if (obj.hasOwnProperty(p = 'RANGE')) {\r\n          v = obj[p];\r\n          if (v && v.pop) {\r\n            intCheck(v[0], -MAX, -1, p);\r\n            intCheck(v[1], 1, MAX, p);\r\n            MIN_EXP = v[0];\r\n            MAX_EXP = v[1];\r\n          } else {\r\n            intCheck(v, -MAX, MAX, p);\r\n            if (v) {\r\n              MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' cannot be zero: ' + v);\r\n            }\r\n          }\r\n        }\r\n\r\n        // CRYPTO {boolean} true or false.\r\n        // '[BigNumber Error] CRYPTO not true or false: {v}'\r\n        // '[BigNumber Error] crypto unavailable'\r\n        if (obj.hasOwnProperty(p = 'CRYPTO')) {\r\n          v = obj[p];\r\n          if (v === !!v) {\r\n            if (v) {\r\n              if (typeof crypto != 'undefined' && crypto &&\r\n               (crypto.getRandomValues || crypto.randomBytes)) {\r\n                CRYPTO = v;\r\n              } else {\r\n                CRYPTO = !v;\r\n                throw Error\r\n                 (bignumberError + 'crypto unavailable');\r\n              }\r\n            } else {\r\n              CRYPTO = v;\r\n            }\r\n          } else {\r\n            throw Error\r\n             (bignumberError + p + ' not true or false: ' + v);\r\n          }\r\n        }\r\n\r\n        // MODULO_MODE {number} Integer, 0 to 9 inclusive.\r\n        // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n        if (obj.hasOwnProperty(p = 'MODULO_MODE')) {\r\n          v = obj[p];\r\n          intCheck(v, 0, 9, p);\r\n          MODULO_MODE = v;\r\n        }\r\n\r\n        // POW_PRECISION {number} Integer, 0 to MAX inclusive.\r\n        // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'\r\n        if (obj.hasOwnProperty(p = 'POW_PRECISION')) {\r\n          v = obj[p];\r\n          intCheck(v, 0, MAX, p);\r\n          POW_PRECISION = v;\r\n        }\r\n\r\n        // FORMAT {object}\r\n        // '[BigNumber Error] FORMAT not an object: {v}'\r\n        if (obj.hasOwnProperty(p = 'FORMAT')) {\r\n          v = obj[p];\r\n          if (typeof v == 'object') FORMAT = v;\r\n          else throw Error\r\n           (bignumberError + p + ' not an object: ' + v);\r\n        }\r\n\r\n        // ALPHABET {string}\r\n        // '[BigNumber Error] ALPHABET invalid: {v}'\r\n        if (obj.hasOwnProperty(p = 'ALPHABET')) {\r\n          v = obj[p];\r\n\r\n          // Disallow if less than two characters,\r\n          // or if it contains '+', '-', '.', whitespace, or a repeated character.\r\n          if (typeof v == 'string' && !/^.?$|[+\\-.\\s]|(.).*\\1/.test(v)) {\r\n            alphabetHasNormalDecimalDigits = v.slice(0, 10) == '0123456789';\r\n            ALPHABET = v;\r\n          } else {\r\n            throw Error\r\n             (bignumberError + p + ' invalid: ' + v);\r\n          }\r\n        }\r\n\r\n      } else {\r\n\r\n        // '[BigNumber Error] Object expected: {v}'\r\n        throw Error\r\n         (bignumberError + 'Object expected: ' + obj);\r\n      }\r\n    }\r\n\r\n    return {\r\n      DECIMAL_PLACES: DECIMAL_PLACES,\r\n      ROUNDING_MODE: ROUNDING_MODE,\r\n      EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],\r\n      RANGE: [MIN_EXP, MAX_EXP],\r\n      CRYPTO: CRYPTO,\r\n      MODULO_MODE: MODULO_MODE,\r\n      POW_PRECISION: POW_PRECISION,\r\n      FORMAT: FORMAT,\r\n      ALPHABET: ALPHABET\r\n    };\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if v is a BigNumber instance, otherwise return false.\r\n   *\r\n   * If BigNumber.DEBUG is true, throw if a BigNumber instance is not well-formed.\r\n   *\r\n   * v {any}\r\n   *\r\n   * '[BigNumber Error] Invalid BigNumber: {v}'\r\n   */\r\n  BigNumber.isBigNumber = function (v) {\r\n    if (!v || v._isBigNumber !== true) return false;\r\n    if (!BigNumber.DEBUG) return true;\r\n\r\n    var i, n,\r\n      c = v.c,\r\n      e = v.e,\r\n      s = v.s;\r\n\r\n    out: if ({}.toString.call(c) == '[object Array]') {\r\n\r\n      if ((s === 1 || s === -1) && e >= -MAX && e <= MAX && e === mathfloor(e)) {\r\n\r\n        // If the first element is zero, the BigNumber value must be zero.\r\n        if (c[0] === 0) {\r\n          if (e === 0 && c.length === 1) return true;\r\n          break out;\r\n        }\r\n\r\n        // Calculate number of digits that c[0] should have, based on the exponent.\r\n        i = (e + 1) % LOG_BASE;\r\n        if (i < 1) i += LOG_BASE;\r\n\r\n        // Calculate number of digits of c[0].\r\n        //if (Math.ceil(Math.log(c[0] + 1) / Math.LN10) == i) {\r\n        if (String(c[0]).length == i) {\r\n\r\n          for (i = 0; i < c.length; i++) {\r\n            n = c[i];\r\n            if (n < 0 || n >= BASE || n !== mathfloor(n)) break out;\r\n          }\r\n\r\n          // Last element cannot be zero, unless it is the only element.\r\n          if (n !== 0) return true;\r\n        }\r\n      }\r\n\r\n    // Infinity/NaN\r\n    } else if (c === null && e === null && (s === null || s === 1 || s === -1)) {\r\n      return true;\r\n    }\r\n\r\n    throw Error\r\n      (bignumberError + 'Invalid BigNumber: ' + v);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the maximum of the arguments.\r\n   *\r\n   * arguments {number|string|BigNumber}\r\n   */\r\n  BigNumber.maximum = BigNumber.max = function () {\r\n    return maxOrMin(arguments, -1);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the minimum of the arguments.\r\n   *\r\n   * arguments {number|string|BigNumber}\r\n   */\r\n  BigNumber.minimum = BigNumber.min = function () {\r\n    return maxOrMin(arguments, 1);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,\r\n   * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing\r\n   * zeros are produced).\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'\r\n   * '[BigNumber Error] crypto unavailable'\r\n   */\r\n  BigNumber.random = (function () {\r\n    var pow2_53 = 0x20000000000000;\r\n\r\n    // Return a 53 bit integer n, where 0 <= n < 9007199254740992.\r\n    // Check if Math.random() produces more than 32 bits of randomness.\r\n    // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.\r\n    // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.\r\n    var random53bitInt = (Math.random() * pow2_53) & 0x1fffff\r\n     ? function () { return mathfloor(Math.random() * pow2_53); }\r\n     : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +\r\n       (Math.random() * 0x800000 | 0); };\r\n\r\n    return function (dp) {\r\n      var a, b, e, k, v,\r\n        i = 0,\r\n        c = [],\r\n        rand = new BigNumber(ONE);\r\n\r\n      if (dp == null) dp = DECIMAL_PLACES;\r\n      else intCheck(dp, 0, MAX);\r\n\r\n      k = mathceil(dp / LOG_BASE);\r\n\r\n      if (CRYPTO) {\r\n\r\n        // Browsers supporting crypto.getRandomValues.\r\n        if (crypto.getRandomValues) {\r\n\r\n          a = crypto.getRandomValues(new Uint32Array(k *= 2));\r\n\r\n          for (; i < k;) {\r\n\r\n            // 53 bits:\r\n            // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)\r\n            // 11111 11111111 11111111 11111111 11100000 00000000 00000000\r\n            // ((Math.pow(2, 32) - 1) >>> 11).toString(2)\r\n            //                                     11111 11111111 11111111\r\n            // 0x20000 is 2^21.\r\n            v = a[i] * 0x20000 + (a[i + 1] >>> 11);\r\n\r\n            // Rejection sampling:\r\n            // 0 <= v < 9007199254740992\r\n            // Probability that v >= 9e15, is\r\n            // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251\r\n            if (v >= 9e15) {\r\n              b = crypto.getRandomValues(new Uint32Array(2));\r\n              a[i] = b[0];\r\n              a[i + 1] = b[1];\r\n            } else {\r\n\r\n              // 0 <= v <= 8999999999999999\r\n              // 0 <= (v % 1e14) <= 99999999999999\r\n              c.push(v % 1e14);\r\n              i += 2;\r\n            }\r\n          }\r\n          i = k / 2;\r\n\r\n        // Node.js supporting crypto.randomBytes.\r\n        } else if (crypto.randomBytes) {\r\n\r\n          // buffer\r\n          a = crypto.randomBytes(k *= 7);\r\n\r\n          for (; i < k;) {\r\n\r\n            // 0x1000000000000 is 2^48, 0x10000000000 is 2^40\r\n            // 0x100000000 is 2^32, 0x1000000 is 2^24\r\n            // 11111 11111111 11111111 11111111 11111111 11111111 11111111\r\n            // 0 <= v < 9007199254740992\r\n            v = ((a[i] & 31) * 0x1000000000000) + (a[i + 1] * 0x10000000000) +\r\n               (a[i + 2] * 0x100000000) + (a[i + 3] * 0x1000000) +\r\n               (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];\r\n\r\n            if (v >= 9e15) {\r\n              crypto.randomBytes(7).copy(a, i);\r\n            } else {\r\n\r\n              // 0 <= (v % 1e14) <= 99999999999999\r\n              c.push(v % 1e14);\r\n              i += 7;\r\n            }\r\n          }\r\n          i = k / 7;\r\n        } else {\r\n          CRYPTO = false;\r\n          throw Error\r\n           (bignumberError + 'crypto unavailable');\r\n        }\r\n      }\r\n\r\n      // Use Math.random.\r\n      if (!CRYPTO) {\r\n\r\n        for (; i < k;) {\r\n          v = random53bitInt();\r\n          if (v < 9e15) c[i++] = v % 1e14;\r\n        }\r\n      }\r\n\r\n      k = c[--i];\r\n      dp %= LOG_BASE;\r\n\r\n      // Convert trailing digits to zeros according to dp.\r\n      if (k && dp) {\r\n        v = POWS_TEN[LOG_BASE - dp];\r\n        c[i] = mathfloor(k / v) * v;\r\n      }\r\n\r\n      // Remove trailing elements which are zero.\r\n      for (; c[i] === 0; c.pop(), i--);\r\n\r\n      // Zero?\r\n      if (i < 0) {\r\n        c = [e = 0];\r\n      } else {\r\n\r\n        // Remove leading elements which are zero and adjust exponent accordingly.\r\n        for (e = -1 ; c[0] === 0; c.splice(0, 1), e -= LOG_BASE);\r\n\r\n        // Count the digits of the first element of c to determine leading zeros, and...\r\n        for (i = 1, v = c[0]; v >= 10; v /= 10, i++);\r\n\r\n        // adjust the exponent accordingly.\r\n        if (i < LOG_BASE) e -= LOG_BASE - i;\r\n      }\r\n\r\n      rand.e = e;\r\n      rand.c = c;\r\n      return rand;\r\n    };\r\n  })();\r\n\r\n\r\n   /*\r\n   * Return a BigNumber whose value is the sum of the arguments.\r\n   *\r\n   * arguments {number|string|BigNumber}\r\n   */\r\n  BigNumber.sum = function () {\r\n    var i = 1,\r\n      args = arguments,\r\n      sum = new BigNumber(args[0]);\r\n    for (; i < args.length;) sum = sum.plus(args[i++]);\r\n    return sum;\r\n  };\r\n\r\n\r\n  // PRIVATE FUNCTIONS\r\n\r\n\r\n  // Called by BigNumber and BigNumber.prototype.toString.\r\n  convertBase = (function () {\r\n    var decimal = '0123456789';\r\n\r\n    /*\r\n     * Convert string of baseIn to an array of numbers of baseOut.\r\n     * Eg. toBaseOut('255', 10, 16) returns [15, 15].\r\n     * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].\r\n     */\r\n    function toBaseOut(str, baseIn, baseOut, alphabet) {\r\n      var j,\r\n        arr = [0],\r\n        arrL,\r\n        i = 0,\r\n        len = str.length;\r\n\r\n      for (; i < len;) {\r\n        for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);\r\n\r\n        arr[0] += alphabet.indexOf(str.charAt(i++));\r\n\r\n        for (j = 0; j < arr.length; j++) {\r\n\r\n          if (arr[j] > baseOut - 1) {\r\n            if (arr[j + 1] == null) arr[j + 1] = 0;\r\n            arr[j + 1] += arr[j] / baseOut | 0;\r\n            arr[j] %= baseOut;\r\n          }\r\n        }\r\n      }\r\n\r\n      return arr.reverse();\r\n    }\r\n\r\n    // Convert a numeric string of baseIn to a numeric string of baseOut.\r\n    // If the caller is toString, we are converting from base 10 to baseOut.\r\n    // If the caller is BigNumber, we are converting from baseIn to base 10.\r\n    return function (str, baseIn, baseOut, sign, callerIsToString) {\r\n      var alphabet, d, e, k, r, x, xc, y,\r\n        i = str.indexOf('.'),\r\n        dp = DECIMAL_PLACES,\r\n        rm = ROUNDING_MODE;\r\n\r\n      // Non-integer.\r\n      if (i >= 0) {\r\n        k = POW_PRECISION;\r\n\r\n        // Unlimited precision.\r\n        POW_PRECISION = 0;\r\n        str = str.replace('.', '');\r\n        y = new BigNumber(baseIn);\r\n        x = y.pow(str.length - i);\r\n        POW_PRECISION = k;\r\n\r\n        // Convert str as if an integer, then restore the fraction part by dividing the\r\n        // result by its base raised to a power.\r\n\r\n        y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'),\r\n         10, baseOut, decimal);\r\n        y.e = y.c.length;\r\n      }\r\n\r\n      // Convert the number as integer.\r\n\r\n      xc = toBaseOut(str, baseIn, baseOut, callerIsToString\r\n       ? (alphabet = ALPHABET, decimal)\r\n       : (alphabet = decimal, ALPHABET));\r\n\r\n      // xc now represents str as an integer and converted to baseOut. e is the exponent.\r\n      e = k = xc.length;\r\n\r\n      // Remove trailing zeros.\r\n      for (; xc[--k] == 0; xc.pop());\r\n\r\n      // Zero?\r\n      if (!xc[0]) return alphabet.charAt(0);\r\n\r\n      // Does str represent an integer? If so, no need for the division.\r\n      if (i < 0) {\r\n        --e;\r\n      } else {\r\n        x.c = xc;\r\n        x.e = e;\r\n\r\n        // The sign is needed for correct rounding.\r\n        x.s = sign;\r\n        x = div(x, y, dp, rm, baseOut);\r\n        xc = x.c;\r\n        r = x.r;\r\n        e = x.e;\r\n      }\r\n\r\n      // xc now represents str converted to baseOut.\r\n\r\n      // THe index of the rounding digit.\r\n      d = e + dp + 1;\r\n\r\n      // The rounding digit: the digit to the right of the digit that may be rounded up.\r\n      i = xc[d];\r\n\r\n      // Look at the rounding digits and mode to determine whether to round up.\r\n\r\n      k = baseOut / 2;\r\n      r = r || d < 0 || xc[d + 1] != null;\r\n\r\n      r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n            : i > k || i == k &&(rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||\r\n             rm == (x.s < 0 ? 8 : 7));\r\n\r\n      // If the index of the rounding digit is not greater than zero, or xc represents\r\n      // zero, then the result of the base conversion is zero or, if rounding up, a value\r\n      // such as 0.00001.\r\n      if (d < 1 || !xc[0]) {\r\n\r\n        // 1^-dp or 0\r\n        str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);\r\n      } else {\r\n\r\n        // Truncate xc to the required number of decimal places.\r\n        xc.length = d;\r\n\r\n        // Round up?\r\n        if (r) {\r\n\r\n          // Rounding up may mean the previous digit has to be rounded up and so on.\r\n          for (--baseOut; ++xc[--d] > baseOut;) {\r\n            xc[d] = 0;\r\n\r\n            if (!d) {\r\n              ++e;\r\n              xc = [1].concat(xc);\r\n            }\r\n          }\r\n        }\r\n\r\n        // Determine trailing zeros.\r\n        for (k = xc.length; !xc[--k];);\r\n\r\n        // E.g. [4, 11, 15] becomes 4bf.\r\n        for (i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++]));\r\n\r\n        // Add leading zeros, decimal point and trailing zeros as required.\r\n        str = toFixedPoint(str, e, alphabet.charAt(0));\r\n      }\r\n\r\n      // The caller will add the sign.\r\n      return str;\r\n    };\r\n  })();\r\n\r\n\r\n  // Perform division in the specified base. Called by div and convertBase.\r\n  div = (function () {\r\n\r\n    // Assume non-zero x and k.\r\n    function multiply(x, k, base) {\r\n      var m, temp, xlo, xhi,\r\n        carry = 0,\r\n        i = x.length,\r\n        klo = k % SQRT_BASE,\r\n        khi = k / SQRT_BASE | 0;\r\n\r\n      for (x = x.slice(); i--;) {\r\n        xlo = x[i] % SQRT_BASE;\r\n        xhi = x[i] / SQRT_BASE | 0;\r\n        m = khi * xlo + xhi * klo;\r\n        temp = klo * xlo + ((m % SQRT_BASE) * SQRT_BASE) + carry;\r\n        carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;\r\n        x[i] = temp % base;\r\n      }\r\n\r\n      if (carry) x = [carry].concat(x);\r\n\r\n      return x;\r\n    }\r\n\r\n    function compare(a, b, aL, bL) {\r\n      var i, cmp;\r\n\r\n      if (aL != bL) {\r\n        cmp = aL > bL ? 1 : -1;\r\n      } else {\r\n\r\n        for (i = cmp = 0; i < aL; i++) {\r\n\r\n          if (a[i] != b[i]) {\r\n            cmp = a[i] > b[i] ? 1 : -1;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      return cmp;\r\n    }\r\n\r\n    function subtract(a, b, aL, base) {\r\n      var i = 0;\r\n\r\n      // Subtract b from a.\r\n      for (; aL--;) {\r\n        a[aL] -= i;\r\n        i = a[aL] < b[aL] ? 1 : 0;\r\n        a[aL] = i * base + a[aL] - b[aL];\r\n      }\r\n\r\n      // Remove leading zeros.\r\n      for (; !a[0] && a.length > 1; a.splice(0, 1));\r\n    }\r\n\r\n    // x: dividend, y: divisor.\r\n    return function (x, y, dp, rm, base) {\r\n      var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,\r\n        yL, yz,\r\n        s = x.s == y.s ? 1 : -1,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      // Either NaN, Infinity or 0?\r\n      if (!xc || !xc[0] || !yc || !yc[0]) {\r\n\r\n        return new BigNumber(\r\n\r\n         // Return NaN if either NaN, or both Infinity or 0.\r\n         !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN :\r\n\r\n          // Return \u00B10 if x is \u00B10 or y is \u00B1Infinity, or return \u00B1Infinity as y is \u00B10.\r\n          xc && xc[0] == 0 || !yc ? s * 0 : s / 0\r\n       );\r\n      }\r\n\r\n      q = new BigNumber(s);\r\n      qc = q.c = [];\r\n      e = x.e - y.e;\r\n      s = dp + e + 1;\r\n\r\n      if (!base) {\r\n        base = BASE;\r\n        e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);\r\n        s = s / LOG_BASE | 0;\r\n      }\r\n\r\n      // Result exponent may be one less then the current value of e.\r\n      // The coefficients of the BigNumbers from convertBase may have trailing zeros.\r\n      for (i = 0; yc[i] == (xc[i] || 0); i++);\r\n\r\n      if (yc[i] > (xc[i] || 0)) e--;\r\n\r\n      if (s < 0) {\r\n        qc.push(1);\r\n        more = true;\r\n      } else {\r\n        xL = xc.length;\r\n        yL = yc.length;\r\n        i = 0;\r\n        s += 2;\r\n\r\n        // Normalise xc and yc so highest order digit of yc is >= base / 2.\r\n\r\n        n = mathfloor(base / (yc[0] + 1));\r\n\r\n        // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.\r\n        // if (n > 1 || n++ == 1 && yc[0] < base / 2) {\r\n        if (n > 1) {\r\n          yc = multiply(yc, n, base);\r\n          xc = multiply(xc, n, base);\r\n          yL = yc.length;\r\n          xL = xc.length;\r\n        }\r\n\r\n        xi = yL;\r\n        rem = xc.slice(0, yL);\r\n        remL = rem.length;\r\n\r\n        // Add zeros to make remainder as long as divisor.\r\n        for (; remL < yL; rem[remL++] = 0);\r\n        yz = yc.slice();\r\n        yz = [0].concat(yz);\r\n        yc0 = yc[0];\r\n        if (yc[1] >= base / 2) yc0++;\r\n        // Not necessary, but to prevent trial digit n > base, when using base 3.\r\n        // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;\r\n\r\n        do {\r\n          n = 0;\r\n\r\n          // Compare divisor and remainder.\r\n          cmp = compare(yc, rem, yL, remL);\r\n\r\n          // If divisor < remainder.\r\n          if (cmp < 0) {\r\n\r\n            // Calculate trial digit, n.\r\n\r\n            rem0 = rem[0];\r\n            if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\r\n\r\n            // n is how many times the divisor goes into the current remainder.\r\n            n = mathfloor(rem0 / yc0);\r\n\r\n            //  Algorithm:\r\n            //  product = divisor multiplied by trial digit (n).\r\n            //  Compare product and remainder.\r\n            //  If product is greater than remainder:\r\n            //    Subtract divisor from product, decrement trial digit.\r\n            //  Subtract product from remainder.\r\n            //  If product was less than remainder at the last compare:\r\n            //    Compare new remainder and divisor.\r\n            //    If remainder is greater than divisor:\r\n            //      Subtract divisor from remainder, increment trial digit.\r\n\r\n            if (n > 1) {\r\n\r\n              // n may be > base only when base is 3.\r\n              if (n >= base) n = base - 1;\r\n\r\n              // product = divisor * trial digit.\r\n              prod = multiply(yc, n, base);\r\n              prodL = prod.length;\r\n              remL = rem.length;\r\n\r\n              // Compare product and remainder.\r\n              // If product > remainder then trial digit n too high.\r\n              // n is 1 too high about 5% of the time, and is not known to have\r\n              // ever been more than 1 too high.\r\n              while (compare(prod, rem, prodL, remL) == 1) {\r\n                n--;\r\n\r\n                // Subtract divisor from product.\r\n                subtract(prod, yL < prodL ? yz : yc, prodL, base);\r\n                prodL = prod.length;\r\n                cmp = 1;\r\n              }\r\n            } else {\r\n\r\n              // n is 0 or 1, cmp is -1.\r\n              // If n is 0, there is no need to compare yc and rem again below,\r\n              // so change cmp to 1 to avoid it.\r\n              // If n is 1, leave cmp as -1, so yc and rem are compared again.\r\n              if (n == 0) {\r\n\r\n                // divisor < remainder, so n must be at least 1.\r\n                cmp = n = 1;\r\n              }\r\n\r\n              // product = divisor\r\n              prod = yc.slice();\r\n              prodL = prod.length;\r\n            }\r\n\r\n            if (prodL < remL) prod = [0].concat(prod);\r\n\r\n            // Subtract product from remainder.\r\n            subtract(rem, prod, remL, base);\r\n            remL = rem.length;\r\n\r\n             // If product was < remainder.\r\n            if (cmp == -1) {\r\n\r\n              // Compare divisor and new remainder.\r\n              // If divisor < new remainder, subtract divisor from remainder.\r\n              // Trial digit n too low.\r\n              // n is 1 too low about 5% of the time, and very rarely 2 too low.\r\n              while (compare(yc, rem, yL, remL) < 1) {\r\n                n++;\r\n\r\n                // Subtract divisor from remainder.\r\n                subtract(rem, yL < remL ? yz : yc, remL, base);\r\n                remL = rem.length;\r\n              }\r\n            }\r\n          } else if (cmp === 0) {\r\n            n++;\r\n            rem = [0];\r\n          } // else cmp === 1 and n will be 0\r\n\r\n          // Add the next digit, n, to the result array.\r\n          qc[i++] = n;\r\n\r\n          // Update the remainder.\r\n          if (rem[0]) {\r\n            rem[remL++] = xc[xi] || 0;\r\n          } else {\r\n            rem = [xc[xi]];\r\n            remL = 1;\r\n          }\r\n        } while ((xi++ < xL || rem[0] != null) && s--);\r\n\r\n        more = rem[0] != null;\r\n\r\n        // Leading zero?\r\n        if (!qc[0]) qc.splice(0, 1);\r\n      }\r\n\r\n      if (base == BASE) {\r\n\r\n        // To calculate q.e, first get the number of digits of qc[0].\r\n        for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);\r\n\r\n        round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);\r\n\r\n      // Caller is convertBase.\r\n      } else {\r\n        q.e = e;\r\n        q.r = +more;\r\n      }\r\n\r\n      return q;\r\n    };\r\n  })();\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of BigNumber n in fixed-point or exponential\r\n   * notation rounded to the specified decimal places or significant digits.\r\n   *\r\n   * n: a BigNumber.\r\n   * i: the index of the last digit required (i.e. the digit that may be rounded up).\r\n   * rm: the rounding mode.\r\n   * id: 1 (toExponential) or 2 (toPrecision).\r\n   */\r\n  function format(n, i, rm, id) {\r\n    var c0, e, ne, len, str;\r\n\r\n    if (rm == null) rm = ROUNDING_MODE;\r\n    else intCheck(rm, 0, 8);\r\n\r\n    if (!n.c) return n.toString();\r\n\r\n    c0 = n.c[0];\r\n    ne = n.e;\r\n\r\n    if (i == null) {\r\n      str = coeffToString(n.c);\r\n      str = id == 1 || id == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS)\r\n       ? toExponential(str, ne)\r\n       : toFixedPoint(str, ne, '0');\r\n    } else {\r\n      n = round(new BigNumber(n), i, rm);\r\n\r\n      // n.e may have changed if the value was rounded up.\r\n      e = n.e;\r\n\r\n      str = coeffToString(n.c);\r\n      len = str.length;\r\n\r\n      // toPrecision returns exponential notation if the number of significant digits\r\n      // specified is less than the number of digits necessary to represent the integer\r\n      // part of the value in fixed-point notation.\r\n\r\n      // Exponential notation.\r\n      if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {\r\n\r\n        // Append zeros?\r\n        for (; len < i; str += '0', len++);\r\n        str = toExponential(str, e);\r\n\r\n      // Fixed-point notation.\r\n      } else {\r\n        i -= ne;\r\n        str = toFixedPoint(str, e, '0');\r\n\r\n        // Append zeros?\r\n        if (e + 1 > len) {\r\n          if (--i > 0) for (str += '.'; i--; str += '0');\r\n        } else {\r\n          i += e - len;\r\n          if (i > 0) {\r\n            if (e + 1 == len) str += '.';\r\n            for (; i--; str += '0');\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return n.s < 0 && c0 ? '-' + str : str;\r\n  }\r\n\r\n\r\n  // Handle BigNumber.max and BigNumber.min.\r\n  // If any number is NaN, return NaN.\r\n  function maxOrMin(args, n) {\r\n    var k, y,\r\n      i = 1,\r\n      x = new BigNumber(args[0]);\r\n\r\n    for (; i < args.length; i++) {\r\n      y = new BigNumber(args[i]);\r\n      if (!y.s || (k = compare(x, y)) === n || k === 0 && x.s === n) {\r\n        x = y;\r\n      }\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  /*\r\n   * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.\r\n   * Called by minus, plus and times.\r\n   */\r\n  function normalise(n, c, e) {\r\n    var i = 1,\r\n      j = c.length;\r\n\r\n     // Remove trailing zeros.\r\n    for (; !c[--j]; c.pop());\r\n\r\n    // Calculate the base 10 exponent. First get the number of digits of c[0].\r\n    for (j = c[0]; j >= 10; j /= 10, i++);\r\n\r\n    // Overflow?\r\n    if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {\r\n\r\n      // Infinity.\r\n      n.c = n.e = null;\r\n\r\n    // Underflow?\r\n    } else if (e < MIN_EXP) {\r\n\r\n      // Zero.\r\n      n.c = [n.e = 0];\r\n    } else {\r\n      n.e = e;\r\n      n.c = c;\r\n    }\r\n\r\n    return n;\r\n  }\r\n\r\n\r\n  // Handle values that fail the validity test in BigNumber.\r\n  parseNumeric = (function () {\r\n    var basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i,\r\n      dotAfter = /^([^.]+)\\.$/,\r\n      dotBefore = /^\\.([^.]+)$/,\r\n      isInfinityOrNaN = /^-?(Infinity|NaN)$/,\r\n      whitespaceOrPlus = /^\\s*\\+(?=[\\w.])|^\\s+|\\s+$/g;\r\n\r\n    return function (x, str, isNum, b) {\r\n      var base,\r\n        s = isNum ? str : str.replace(whitespaceOrPlus, '');\r\n\r\n      // No exception on \u00B1Infinity or NaN.\r\n      if (isInfinityOrNaN.test(s)) {\r\n        x.s = isNaN(s) ? null : s < 0 ? -1 : 1;\r\n      } else {\r\n        if (!isNum) {\r\n\r\n          // basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i\r\n          s = s.replace(basePrefix, function (m, p1, p2) {\r\n            base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;\r\n            return !b || b == base ? p1 : m;\r\n          });\r\n\r\n          if (b) {\r\n            base = b;\r\n\r\n            // E.g. '1.' to '1', '.1' to '0.1'\r\n            s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');\r\n          }\r\n\r\n          if (str != s) return new BigNumber(s, base);\r\n        }\r\n\r\n        // '[BigNumber Error] Not a number: {n}'\r\n        // '[BigNumber Error] Not a base {b} number: {n}'\r\n        if (BigNumber.DEBUG) {\r\n          throw Error\r\n            (bignumberError + 'Not a' + (b ? ' base ' + b : '') + ' number: ' + str);\r\n        }\r\n\r\n        // NaN\r\n        x.s = null;\r\n      }\r\n\r\n      x.c = x.e = null;\r\n    }\r\n  })();\r\n\r\n\r\n  /*\r\n   * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.\r\n   * If r is truthy, it is known that there are more digits after the rounding digit.\r\n   */\r\n  function round(x, sd, rm, r) {\r\n    var d, i, j, k, n, ni, rd,\r\n      xc = x.c,\r\n      pows10 = POWS_TEN;\r\n\r\n    // if x is not Infinity or NaN...\r\n    if (xc) {\r\n\r\n      // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n      // n is a base 1e14 number, the value of the element of array x.c containing rd.\r\n      // ni is the index of n within x.c.\r\n      // d is the number of digits of n.\r\n      // i is the index of rd within n including leading zeros.\r\n      // j is the actual index of rd within n (if < 0, rd is a leading zero).\r\n      out: {\r\n\r\n        // Get the number of digits of the first element of xc.\r\n        for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);\r\n        i = sd - d;\r\n\r\n        // If the rounding digit is in the first element of xc...\r\n        if (i < 0) {\r\n          i += LOG_BASE;\r\n          j = sd;\r\n          n = xc[ni = 0];\r\n\r\n          // Get the rounding digit at index j of n.\r\n          rd = mathfloor(n / pows10[d - j - 1] % 10);\r\n        } else {\r\n          ni = mathceil((i + 1) / LOG_BASE);\r\n\r\n          if (ni >= xc.length) {\r\n\r\n            if (r) {\r\n\r\n              // Needed by sqrt.\r\n              for (; xc.length <= ni; xc.push(0));\r\n              n = rd = 0;\r\n              d = 1;\r\n              i %= LOG_BASE;\r\n              j = i - LOG_BASE + 1;\r\n            } else {\r\n              break out;\r\n            }\r\n          } else {\r\n            n = k = xc[ni];\r\n\r\n            // Get the number of digits of n.\r\n            for (d = 1; k >= 10; k /= 10, d++);\r\n\r\n            // Get the index of rd within n.\r\n            i %= LOG_BASE;\r\n\r\n            // Get the index of rd within n, adjusted for leading zeros.\r\n            // The number of leading zeros of n is given by LOG_BASE - d.\r\n            j = i - LOG_BASE + d;\r\n\r\n            // Get the rounding digit at index j of n.\r\n            rd = j < 0 ? 0 : mathfloor(n / pows10[d - j - 1] % 10);\r\n          }\r\n        }\r\n\r\n        r = r || sd < 0 ||\r\n\r\n        // Are there any non-zero digits after the rounding digit?\r\n        // The expression  n % pows10[d - j - 1]  returns all digits of n to the right\r\n        // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.\r\n         xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);\r\n\r\n        r = rm < 4\r\n         ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n         : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 &&\r\n\r\n          // Check whether the digit to the left of the rounding digit is odd.\r\n          ((i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10) & 1 ||\r\n           rm == (x.s < 0 ? 8 : 7));\r\n\r\n        if (sd < 1 || !xc[0]) {\r\n          xc.length = 0;\r\n\r\n          if (r) {\r\n\r\n            // Convert sd to decimal places.\r\n            sd -= x.e + 1;\r\n\r\n            // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n            xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];\r\n            x.e = -sd || 0;\r\n          } else {\r\n\r\n            // Zero.\r\n            xc[0] = x.e = 0;\r\n          }\r\n\r\n          return x;\r\n        }\r\n\r\n        // Remove excess digits.\r\n        if (i == 0) {\r\n          xc.length = ni;\r\n          k = 1;\r\n          ni--;\r\n        } else {\r\n          xc.length = ni + 1;\r\n          k = pows10[LOG_BASE - i];\r\n\r\n          // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n          // j > 0 means i > number of leading zeros of n.\r\n          xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;\r\n        }\r\n\r\n        // Round up?\r\n        if (r) {\r\n\r\n          for (; ;) {\r\n\r\n            // If the digit to be rounded up is in the first element of xc...\r\n            if (ni == 0) {\r\n\r\n              // i will be the length of xc[0] before k is added.\r\n              for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);\r\n              j = xc[0] += k;\r\n              for (k = 1; j >= 10; j /= 10, k++);\r\n\r\n              // if i != k the length has increased.\r\n              if (i != k) {\r\n                x.e++;\r\n                if (xc[0] == BASE) xc[0] = 1;\r\n              }\r\n\r\n              break;\r\n            } else {\r\n              xc[ni] += k;\r\n              if (xc[ni] != BASE) break;\r\n              xc[ni--] = 0;\r\n              k = 1;\r\n            }\r\n          }\r\n        }\r\n\r\n        // Remove trailing zeros.\r\n        for (i = xc.length; xc[--i] === 0; xc.pop());\r\n      }\r\n\r\n      // Overflow? Infinity.\r\n      if (x.e > MAX_EXP) {\r\n        x.c = x.e = null;\r\n\r\n      // Underflow? Zero.\r\n      } else if (x.e < MIN_EXP) {\r\n        x.c = [x.e = 0];\r\n      }\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  function valueOf(n) {\r\n    var str,\r\n      e = n.e;\r\n\r\n    if (e === null) return n.toString();\r\n\r\n    str = coeffToString(n.c);\r\n\r\n    str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n      ? toExponential(str, e)\r\n      : toFixedPoint(str, e, '0');\r\n\r\n    return n.s < 0 ? '-' + str : str;\r\n  }\r\n\r\n\r\n  // PROTOTYPE/INSTANCE METHODS\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the absolute value of this BigNumber.\r\n   */\r\n  P.absoluteValue = P.abs = function () {\r\n    var x = new BigNumber(this);\r\n    if (x.s < 0) x.s = 1;\r\n    return x;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return\r\n   *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n   *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n   *   0 if they have the same value,\r\n   *   or null if the value of either is NaN.\r\n   */\r\n  P.comparedTo = function (y, b) {\r\n    return compare(this, new BigNumber(y, b));\r\n  };\r\n\r\n\r\n  /*\r\n   * If dp is undefined or null or true or false, return the number of decimal places of the\r\n   * value of this BigNumber, or null if the value of this BigNumber is \u00B1Infinity or NaN.\r\n   *\r\n   * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this\r\n   * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or\r\n   * ROUNDING_MODE if rm is omitted.\r\n   *\r\n   * [dp] {number} Decimal places: integer, 0 to MAX inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n   */\r\n  P.decimalPlaces = P.dp = function (dp, rm) {\r\n    var c, n, v,\r\n      x = this;\r\n\r\n    if (dp != null) {\r\n      intCheck(dp, 0, MAX);\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n\r\n      return round(new BigNumber(x), dp + x.e + 1, rm);\r\n    }\r\n\r\n    if (!(c = x.c)) return null;\r\n    n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;\r\n\r\n    // Subtract the number of trailing zeros of the last number.\r\n    if (v = c[v]) for (; v % 10 == 0; v /= 10, n--);\r\n    if (n < 0) n = 0;\r\n\r\n    return n;\r\n  };\r\n\r\n\r\n  /*\r\n   *  n / 0 = I\r\n   *  n / N = N\r\n   *  n / I = 0\r\n   *  0 / n = 0\r\n   *  0 / 0 = N\r\n   *  0 / N = N\r\n   *  0 / I = 0\r\n   *  N / n = N\r\n   *  N / 0 = N\r\n   *  N / N = N\r\n   *  N / I = N\r\n   *  I / n = I\r\n   *  I / 0 = I\r\n   *  I / N = N\r\n   *  I / I = N\r\n   *\r\n   * Return a new BigNumber whose value is the value of this BigNumber divided by the value of\r\n   * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n   */\r\n  P.dividedBy = P.div = function (y, b) {\r\n    return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the integer part of dividing the value of this\r\n   * BigNumber by the value of BigNumber(y, b).\r\n   */\r\n  P.dividedToIntegerBy = P.idiv = function (y, b) {\r\n    return div(this, new BigNumber(y, b), 0, 1);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.\r\n   *\r\n   * If m is present, return the result modulo m.\r\n   * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.\r\n   * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.\r\n   *\r\n   * The modular power operation works efficiently when x, n, and m are integers, otherwise it\r\n   * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.\r\n   *\r\n   * n {number|string|BigNumber} The exponent. An integer.\r\n   * [m] {number|string|BigNumber} The modulus.\r\n   *\r\n   * '[BigNumber Error] Exponent not an integer: {n}'\r\n   */\r\n  P.exponentiatedBy = P.pow = function (n, m) {\r\n    var half, isModExp, i, k, more, nIsBig, nIsNeg, nIsOdd, y,\r\n      x = this;\r\n\r\n    n = new BigNumber(n);\r\n\r\n    // Allow NaN and \u00B1Infinity, but not other non-integers.\r\n    if (n.c && !n.isInteger()) {\r\n      throw Error\r\n        (bignumberError + 'Exponent not an integer: ' + valueOf(n));\r\n    }\r\n\r\n    if (m != null) m = new BigNumber(m);\r\n\r\n    // Exponent of MAX_SAFE_INTEGER is 15.\r\n    nIsBig = n.e > 14;\r\n\r\n    // If x is NaN, \u00B1Infinity, \u00B10 or \u00B11, or n is \u00B1Infinity, NaN or \u00B10.\r\n    if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {\r\n\r\n      // The sign of the result of pow when x is negative depends on the evenness of n.\r\n      // If +n overflows to \u00B1Infinity, the evenness of n would be not be known.\r\n      y = new BigNumber(Math.pow(+valueOf(x), nIsBig ? n.s * (2 - isOdd(n)) : +valueOf(n)));\r\n      return m ? y.mod(m) : y;\r\n    }\r\n\r\n    nIsNeg = n.s < 0;\r\n\r\n    if (m) {\r\n\r\n      // x % m returns NaN if abs(m) is zero, or m is NaN.\r\n      if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);\r\n\r\n      isModExp = !nIsNeg && x.isInteger() && m.isInteger();\r\n\r\n      if (isModExp) x = x.mod(m);\r\n\r\n    // Overflow to \u00B1Infinity: >=2**1e10 or >=1.0000024**1e15.\r\n    // Underflow to \u00B10: <=0.79**1e10 or <=0.9999975**1e15.\r\n    } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0\r\n      // [1, 240000000]\r\n      ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7\r\n      // [80000000000000]  [99999750000000]\r\n      : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {\r\n\r\n      // If x is negative and n is odd, k = -0, else k = 0.\r\n      k = x.s < 0 && isOdd(n) ? -0 : 0;\r\n\r\n      // If x >= 1, k = \u00B1Infinity.\r\n      if (x.e > -1) k = 1 / k;\r\n\r\n      // If n is negative return \u00B10, else return \u00B1Infinity.\r\n      return new BigNumber(nIsNeg ? 1 / k : k);\r\n\r\n    } else if (POW_PRECISION) {\r\n\r\n      // Truncating each coefficient array to a length of k after each multiplication\r\n      // equates to truncating significant digits to POW_PRECISION + [28, 41],\r\n      // i.e. there will be a minimum of 28 guard digits retained.\r\n      k = mathceil(POW_PRECISION / LOG_BASE + 2);\r\n    }\r\n\r\n    if (nIsBig) {\r\n      half = new BigNumber(0.5);\r\n      if (nIsNeg) n.s = 1;\r\n      nIsOdd = isOdd(n);\r\n    } else {\r\n      i = Math.abs(+valueOf(n));\r\n      nIsOdd = i % 2;\r\n    }\r\n\r\n    y = new BigNumber(ONE);\r\n\r\n    // Performs 54 loop iterations for n of 9007199254740991.\r\n    for (; ;) {\r\n\r\n      if (nIsOdd) {\r\n        y = y.times(x);\r\n        if (!y.c) break;\r\n\r\n        if (k) {\r\n          if (y.c.length > k) y.c.length = k;\r\n        } else if (isModExp) {\r\n          y = y.mod(m);    //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));\r\n        }\r\n      }\r\n\r\n      if (i) {\r\n        i = mathfloor(i / 2);\r\n        if (i === 0) break;\r\n        nIsOdd = i % 2;\r\n      } else {\r\n        n = n.times(half);\r\n        round(n, n.e + 1, 1);\r\n\r\n        if (n.e > 14) {\r\n          nIsOdd = isOdd(n);\r\n        } else {\r\n          i = +valueOf(n);\r\n          if (i === 0) break;\r\n          nIsOdd = i % 2;\r\n        }\r\n      }\r\n\r\n      x = x.times(x);\r\n\r\n      if (k) {\r\n        if (x.c && x.c.length > k) x.c.length = k;\r\n      } else if (isModExp) {\r\n        x = x.mod(m);    //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));\r\n      }\r\n    }\r\n\r\n    if (isModExp) return y;\r\n    if (nIsNeg) y = ONE.div(y);\r\n\r\n    return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer\r\n   * using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n   *\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'\r\n   */\r\n  P.integerValue = function (rm) {\r\n    var n = new BigNumber(this);\r\n    if (rm == null) rm = ROUNDING_MODE;\r\n    else intCheck(rm, 0, 8);\r\n    return round(n, n.e + 1, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),\r\n   * otherwise return false.\r\n   */\r\n  P.isEqualTo = P.eq = function (y, b) {\r\n    return compare(this, new BigNumber(y, b)) === 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is a finite number, otherwise return false.\r\n   */\r\n  P.isFinite = function () {\r\n    return !!this.c;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n   * otherwise return false.\r\n   */\r\n  P.isGreaterThan = P.gt = function (y, b) {\r\n    return compare(this, new BigNumber(y, b)) > 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is greater than or equal to the value of\r\n   * BigNumber(y, b), otherwise return false.\r\n   */\r\n  P.isGreaterThanOrEqualTo = P.gte = function (y, b) {\r\n    return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;\r\n\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is an integer, otherwise return false.\r\n   */\r\n  P.isInteger = function () {\r\n    return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n   * otherwise return false.\r\n   */\r\n  P.isLessThan = P.lt = function (y, b) {\r\n    return compare(this, new BigNumber(y, b)) < 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is less than or equal to the value of\r\n   * BigNumber(y, b), otherwise return false.\r\n   */\r\n  P.isLessThanOrEqualTo = P.lte = function (y, b) {\r\n    return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is NaN, otherwise return false.\r\n   */\r\n  P.isNaN = function () {\r\n    return !this.s;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is negative, otherwise return false.\r\n   */\r\n  P.isNegative = function () {\r\n    return this.s < 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is positive, otherwise return false.\r\n   */\r\n  P.isPositive = function () {\r\n    return this.s > 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is 0 or -0, otherwise return false.\r\n   */\r\n  P.isZero = function () {\r\n    return !!this.c && this.c[0] == 0;\r\n  };\r\n\r\n\r\n  /*\r\n   *  n - 0 = n\r\n   *  n - N = N\r\n   *  n - I = -I\r\n   *  0 - n = -n\r\n   *  0 - 0 = 0\r\n   *  0 - N = N\r\n   *  0 - I = -I\r\n   *  N - n = N\r\n   *  N - 0 = N\r\n   *  N - N = N\r\n   *  N - I = N\r\n   *  I - n = I\r\n   *  I - 0 = I\r\n   *  I - N = N\r\n   *  I - I = N\r\n   *\r\n   * Return a new BigNumber whose value is the value of this BigNumber minus the value of\r\n   * BigNumber(y, b).\r\n   */\r\n  P.minus = function (y, b) {\r\n    var i, j, t, xLTy,\r\n      x = this,\r\n      a = x.s;\r\n\r\n    y = new BigNumber(y, b);\r\n    b = y.s;\r\n\r\n    // Either NaN?\r\n    if (!a || !b) return new BigNumber(NaN);\r\n\r\n    // Signs differ?\r\n    if (a != b) {\r\n      y.s = -b;\r\n      return x.plus(y);\r\n    }\r\n\r\n    var xe = x.e / LOG_BASE,\r\n      ye = y.e / LOG_BASE,\r\n      xc = x.c,\r\n      yc = y.c;\r\n\r\n    if (!xe || !ye) {\r\n\r\n      // Either Infinity?\r\n      if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);\r\n\r\n      // Either zero?\r\n      if (!xc[0] || !yc[0]) {\r\n\r\n        // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n        return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x :\r\n\r\n         // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity\r\n         ROUNDING_MODE == 3 ? -0 : 0);\r\n      }\r\n    }\r\n\r\n    xe = bitFloor(xe);\r\n    ye = bitFloor(ye);\r\n    xc = xc.slice();\r\n\r\n    // Determine which is the bigger number.\r\n    if (a = xe - ye) {\r\n\r\n      if (xLTy = a < 0) {\r\n        a = -a;\r\n        t = xc;\r\n      } else {\r\n        ye = xe;\r\n        t = yc;\r\n      }\r\n\r\n      t.reverse();\r\n\r\n      // Prepend zeros to equalise exponents.\r\n      for (b = a; b--; t.push(0));\r\n      t.reverse();\r\n    } else {\r\n\r\n      // Exponents equal. Check digit by digit.\r\n      j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;\r\n\r\n      for (a = b = 0; b < j; b++) {\r\n\r\n        if (xc[b] != yc[b]) {\r\n          xLTy = xc[b] < yc[b];\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    // x < y? Point xc to the array of the bigger number.\r\n    if (xLTy) {\r\n      t = xc;\r\n      xc = yc;\r\n      yc = t;\r\n      y.s = -y.s;\r\n    }\r\n\r\n    b = (j = yc.length) - (i = xc.length);\r\n\r\n    // Append zeros to xc if shorter.\r\n    // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.\r\n    if (b > 0) for (; b--; xc[i++] = 0);\r\n    b = BASE - 1;\r\n\r\n    // Subtract yc from xc.\r\n    for (; j > a;) {\r\n\r\n      if (xc[--j] < yc[j]) {\r\n        for (i = j; i && !xc[--i]; xc[i] = b);\r\n        --xc[i];\r\n        xc[j] += BASE;\r\n      }\r\n\r\n      xc[j] -= yc[j];\r\n    }\r\n\r\n    // Remove leading zeros and adjust exponent accordingly.\r\n    for (; xc[0] == 0; xc.splice(0, 1), --ye);\r\n\r\n    // Zero?\r\n    if (!xc[0]) {\r\n\r\n      // Following IEEE 754 (2008) 6.3,\r\n      // n - n = +0  but  n - n = -0  when rounding towards -Infinity.\r\n      y.s = ROUNDING_MODE == 3 ? -1 : 1;\r\n      y.c = [y.e = 0];\r\n      return y;\r\n    }\r\n\r\n    // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity\r\n    // for finite x and y.\r\n    return normalise(y, xc, ye);\r\n  };\r\n\r\n\r\n  /*\r\n   *   n % 0 =  N\r\n   *   n % N =  N\r\n   *   n % I =  n\r\n   *   0 % n =  0\r\n   *  -0 % n = -0\r\n   *   0 % 0 =  N\r\n   *   0 % N =  N\r\n   *   0 % I =  0\r\n   *   N % n =  N\r\n   *   N % 0 =  N\r\n   *   N % N =  N\r\n   *   N % I =  N\r\n   *   I % n =  N\r\n   *   I % 0 =  N\r\n   *   I % N =  N\r\n   *   I % I =  N\r\n   *\r\n   * Return a new BigNumber whose value is the value of this BigNumber modulo the value of\r\n   * BigNumber(y, b). The result depends on the value of MODULO_MODE.\r\n   */\r\n  P.modulo = P.mod = function (y, b) {\r\n    var q, s,\r\n      x = this;\r\n\r\n    y = new BigNumber(y, b);\r\n\r\n    // Return NaN if x is Infinity or NaN, or y is NaN or zero.\r\n    if (!x.c || !y.s || y.c && !y.c[0]) {\r\n      return new BigNumber(NaN);\r\n\r\n    // Return x if y is Infinity or x is zero.\r\n    } else if (!y.c || x.c && !x.c[0]) {\r\n      return new BigNumber(x);\r\n    }\r\n\r\n    if (MODULO_MODE == 9) {\r\n\r\n      // Euclidian division: q = sign(y) * floor(x / abs(y))\r\n      // r = x - qy    where  0 <= r < abs(y)\r\n      s = y.s;\r\n      y.s = 1;\r\n      q = div(x, y, 0, 3);\r\n      y.s = s;\r\n      q.s *= s;\r\n    } else {\r\n      q = div(x, y, 0, MODULO_MODE);\r\n    }\r\n\r\n    y = x.minus(q.times(y));\r\n\r\n    // To match JavaScript %, ensure sign of zero is sign of dividend.\r\n    if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;\r\n\r\n    return y;\r\n  };\r\n\r\n\r\n  /*\r\n   *  n * 0 = 0\r\n   *  n * N = N\r\n   *  n * I = I\r\n   *  0 * n = 0\r\n   *  0 * 0 = 0\r\n   *  0 * N = N\r\n   *  0 * I = N\r\n   *  N * n = N\r\n   *  N * 0 = N\r\n   *  N * N = N\r\n   *  N * I = N\r\n   *  I * n = I\r\n   *  I * 0 = N\r\n   *  I * N = N\r\n   *  I * I = I\r\n   *\r\n   * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value\r\n   * of BigNumber(y, b).\r\n   */\r\n  P.multipliedBy = P.times = function (y, b) {\r\n    var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,\r\n      base, sqrtBase,\r\n      x = this,\r\n      xc = x.c,\r\n      yc = (y = new BigNumber(y, b)).c;\r\n\r\n    // Either NaN, \u00B1Infinity or \u00B10?\r\n    if (!xc || !yc || !xc[0] || !yc[0]) {\r\n\r\n      // Return NaN if either is NaN, or one is 0 and the other is Infinity.\r\n      if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {\r\n        y.c = y.e = y.s = null;\r\n      } else {\r\n        y.s *= x.s;\r\n\r\n        // Return \u00B1Infinity if either is \u00B1Infinity.\r\n        if (!xc || !yc) {\r\n          y.c = y.e = null;\r\n\r\n        // Return \u00B10 if either is \u00B10.\r\n        } else {\r\n          y.c = [0];\r\n          y.e = 0;\r\n        }\r\n      }\r\n\r\n      return y;\r\n    }\r\n\r\n    e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);\r\n    y.s *= x.s;\r\n    xcL = xc.length;\r\n    ycL = yc.length;\r\n\r\n    // Ensure xc points to longer array and xcL to its length.\r\n    if (xcL < ycL) {\r\n      zc = xc;\r\n      xc = yc;\r\n      yc = zc;\r\n      i = xcL;\r\n      xcL = ycL;\r\n      ycL = i;\r\n    }\r\n\r\n    // Initialise the result array with zeros.\r\n    for (i = xcL + ycL, zc = []; i--; zc.push(0));\r\n\r\n    base = BASE;\r\n    sqrtBase = SQRT_BASE;\r\n\r\n    for (i = ycL; --i >= 0;) {\r\n      c = 0;\r\n      ylo = yc[i] % sqrtBase;\r\n      yhi = yc[i] / sqrtBase | 0;\r\n\r\n      for (k = xcL, j = i + k; j > i;) {\r\n        xlo = xc[--k] % sqrtBase;\r\n        xhi = xc[k] / sqrtBase | 0;\r\n        m = yhi * xlo + xhi * ylo;\r\n        xlo = ylo * xlo + ((m % sqrtBase) * sqrtBase) + zc[j] + c;\r\n        c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;\r\n        zc[j--] = xlo % base;\r\n      }\r\n\r\n      zc[j] = c;\r\n    }\r\n\r\n    if (c) {\r\n      ++e;\r\n    } else {\r\n      zc.splice(0, 1);\r\n    }\r\n\r\n    return normalise(y, zc, e);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the value of this BigNumber negated,\r\n   * i.e. multiplied by -1.\r\n   */\r\n  P.negated = function () {\r\n    var x = new BigNumber(this);\r\n    x.s = -x.s || null;\r\n    return x;\r\n  };\r\n\r\n\r\n  /*\r\n   *  n + 0 = n\r\n   *  n + N = N\r\n   *  n + I = I\r\n   *  0 + n = n\r\n   *  0 + 0 = 0\r\n   *  0 + N = N\r\n   *  0 + I = I\r\n   *  N + n = N\r\n   *  N + 0 = N\r\n   *  N + N = N\r\n   *  N + I = N\r\n   *  I + n = I\r\n   *  I + 0 = I\r\n   *  I + N = N\r\n   *  I + I = I\r\n   *\r\n   * Return a new BigNumber whose value is the value of this BigNumber plus the value of\r\n   * BigNumber(y, b).\r\n   */\r\n  P.plus = function (y, b) {\r\n    var t,\r\n      x = this,\r\n      a = x.s;\r\n\r\n    y = new BigNumber(y, b);\r\n    b = y.s;\r\n\r\n    // Either NaN?\r\n    if (!a || !b) return new BigNumber(NaN);\r\n\r\n    // Signs differ?\r\n     if (a != b) {\r\n      y.s = -b;\r\n      return x.minus(y);\r\n    }\r\n\r\n    var xe = x.e / LOG_BASE,\r\n      ye = y.e / LOG_BASE,\r\n      xc = x.c,\r\n      yc = y.c;\r\n\r\n    if (!xe || !ye) {\r\n\r\n      // Return \u00B1Infinity if either \u00B1Infinity.\r\n      if (!xc || !yc) return new BigNumber(a / 0);\r\n\r\n      // Either zero?\r\n      // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n      if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);\r\n    }\r\n\r\n    xe = bitFloor(xe);\r\n    ye = bitFloor(ye);\r\n    xc = xc.slice();\r\n\r\n    // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.\r\n    if (a = xe - ye) {\r\n      if (a > 0) {\r\n        ye = xe;\r\n        t = yc;\r\n      } else {\r\n        a = -a;\r\n        t = xc;\r\n      }\r\n\r\n      t.reverse();\r\n      for (; a--; t.push(0));\r\n      t.reverse();\r\n    }\r\n\r\n    a = xc.length;\r\n    b = yc.length;\r\n\r\n    // Point xc to the longer array, and b to the shorter length.\r\n    if (a - b < 0) {\r\n      t = yc;\r\n      yc = xc;\r\n      xc = t;\r\n      b = a;\r\n    }\r\n\r\n    // Only start adding at yc.length - 1 as the further digits of xc can be ignored.\r\n    for (a = 0; b;) {\r\n      a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;\r\n      xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;\r\n    }\r\n\r\n    if (a) {\r\n      xc = [a].concat(xc);\r\n      ++ye;\r\n    }\r\n\r\n    // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n    // ye = MAX_EXP + 1 possible\r\n    return normalise(y, xc, ye);\r\n  };\r\n\r\n\r\n  /*\r\n   * If sd is undefined or null or true or false, return the number of significant digits of\r\n   * the value of this BigNumber, or null if the value of this BigNumber is \u00B1Infinity or NaN.\r\n   * If sd is true include integer-part trailing zeros in the count.\r\n   *\r\n   * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this\r\n   * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or\r\n   * ROUNDING_MODE if rm is omitted.\r\n   *\r\n   * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.\r\n   *                     boolean: whether to count integer-part trailing zeros: true or false.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n   */\r\n  P.precision = P.sd = function (sd, rm) {\r\n    var c, n, v,\r\n      x = this;\r\n\r\n    if (sd != null && sd !== !!sd) {\r\n      intCheck(sd, 1, MAX);\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n\r\n      return round(new BigNumber(x), sd, rm);\r\n    }\r\n\r\n    if (!(c = x.c)) return null;\r\n    v = c.length - 1;\r\n    n = v * LOG_BASE + 1;\r\n\r\n    if (v = c[v]) {\r\n\r\n      // Subtract the number of trailing zeros of the last element.\r\n      for (; v % 10 == 0; v /= 10, n--);\r\n\r\n      // Add the number of digits of the first element.\r\n      for (v = c[0]; v >= 10; v /= 10, n++);\r\n    }\r\n\r\n    if (sd && x.e + 1 > n) n = x.e + 1;\r\n\r\n    return n;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the value of this BigNumber shifted by k places\r\n   * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.\r\n   *\r\n   * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'\r\n   */\r\n  P.shiftedBy = function (k) {\r\n    intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);\r\n    return this.times('1e' + k);\r\n  };\r\n\r\n\r\n  /*\r\n   *  sqrt(-n) =  N\r\n   *  sqrt(N) =  N\r\n   *  sqrt(-I) =  N\r\n   *  sqrt(I) =  I\r\n   *  sqrt(0) =  0\r\n   *  sqrt(-0) = -0\r\n   *\r\n   * Return a new BigNumber whose value is the square root of the value of this BigNumber,\r\n   * rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n   */\r\n  P.squareRoot = P.sqrt = function () {\r\n    var m, n, r, rep, t,\r\n      x = this,\r\n      c = x.c,\r\n      s = x.s,\r\n      e = x.e,\r\n      dp = DECIMAL_PLACES + 4,\r\n      half = new BigNumber('0.5');\r\n\r\n    // Negative/NaN/Infinity/zero?\r\n    if (s !== 1 || !c || !c[0]) {\r\n      return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);\r\n    }\r\n\r\n    // Initial estimate.\r\n    s = Math.sqrt(+valueOf(x));\r\n\r\n    // Math.sqrt underflow/overflow?\r\n    // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n    if (s == 0 || s == 1 / 0) {\r\n      n = coeffToString(c);\r\n      if ((n.length + e) % 2 == 0) n += '0';\r\n      s = Math.sqrt(+n);\r\n      e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);\r\n\r\n      if (s == 1 / 0) {\r\n        n = '5e' + e;\r\n      } else {\r\n        n = s.toExponential();\r\n        n = n.slice(0, n.indexOf('e') + 1) + e;\r\n      }\r\n\r\n      r = new BigNumber(n);\r\n    } else {\r\n      r = new BigNumber(s + '');\r\n    }\r\n\r\n    // Check for zero.\r\n    // r could be zero if MIN_EXP is changed after the this value was created.\r\n    // This would cause a division by zero (x/t) and hence Infinity below, which would cause\r\n    // coeffToString to throw.\r\n    if (r.c[0]) {\r\n      e = r.e;\r\n      s = e + dp;\r\n      if (s < 3) s = 0;\r\n\r\n      // Newton-Raphson iteration.\r\n      for (; ;) {\r\n        t = r;\r\n        r = half.times(t.plus(div(x, t, dp, 1)));\r\n\r\n        if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {\r\n\r\n          // The exponent of r may here be one less than the final result exponent,\r\n          // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits\r\n          // are indexed correctly.\r\n          if (r.e < e) --s;\r\n          n = n.slice(s - 3, s + 1);\r\n\r\n          // The 4th rounding digit may be in error by -1 so if the 4 rounding digits\r\n          // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the\r\n          // iteration.\r\n          if (n == '9999' || !rep && n == '4999') {\r\n\r\n            // On the first iteration only, check to see if rounding up gives the\r\n            // exact result as the nines may infinitely repeat.\r\n            if (!rep) {\r\n              round(t, t.e + DECIMAL_PLACES + 2, 0);\r\n\r\n              if (t.times(t).eq(x)) {\r\n                r = t;\r\n                break;\r\n              }\r\n            }\r\n\r\n            dp += 4;\r\n            s += 4;\r\n            rep = 1;\r\n          } else {\r\n\r\n            // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact\r\n            // result. If not, then there are further digits and m will be truthy.\r\n            if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n              // Truncate to the first rounding digit.\r\n              round(r, r.e + DECIMAL_PLACES + 2, 1);\r\n              m = !r.times(r).eq(x);\r\n            }\r\n\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this BigNumber in exponential notation and\r\n   * rounded using ROUNDING_MODE to dp fixed decimal places.\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n   */\r\n  P.toExponential = function (dp, rm) {\r\n    if (dp != null) {\r\n      intCheck(dp, 0, MAX);\r\n      dp++;\r\n    }\r\n    return format(this, dp, rm, 1);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this BigNumber in fixed-point notation rounding\r\n   * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n   *\r\n   * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',\r\n   * but e.g. (-0.00001).toFixed(0) is '-0'.\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n   */\r\n  P.toFixed = function (dp, rm) {\r\n    if (dp != null) {\r\n      intCheck(dp, 0, MAX);\r\n      dp = dp + this.e + 1;\r\n    }\r\n    return format(this, dp, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this BigNumber in fixed-point notation rounded\r\n   * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties\r\n   * of the format or FORMAT object (see BigNumber.set).\r\n   *\r\n   * The formatting object may contain some or all of the properties shown below.\r\n   *\r\n   * FORMAT = {\r\n   *   prefix: '',\r\n   *   groupSize: 3,\r\n   *   secondaryGroupSize: 0,\r\n   *   groupSeparator: ',',\r\n   *   decimalSeparator: '.',\r\n   *   fractionGroupSize: 0,\r\n   *   fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n   *   suffix: ''\r\n   * };\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   * [format] {object} Formatting options. See FORMAT pbject above.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n   * '[BigNumber Error] Argument not an object: {format}'\r\n   */\r\n  P.toFormat = function (dp, rm, format) {\r\n    var str,\r\n      x = this;\r\n\r\n    if (format == null) {\r\n      if (dp != null && rm && typeof rm == 'object') {\r\n        format = rm;\r\n        rm = null;\r\n      } else if (dp && typeof dp == 'object') {\r\n        format = dp;\r\n        dp = rm = null;\r\n      } else {\r\n        format = FORMAT;\r\n      }\r\n    } else if (typeof format != 'object') {\r\n      throw Error\r\n        (bignumberError + 'Argument not an object: ' + format);\r\n    }\r\n\r\n    str = x.toFixed(dp, rm);\r\n\r\n    if (x.c) {\r\n      var i,\r\n        arr = str.split('.'),\r\n        g1 = +format.groupSize,\r\n        g2 = +format.secondaryGroupSize,\r\n        groupSeparator = format.groupSeparator || '',\r\n        intPart = arr[0],\r\n        fractionPart = arr[1],\r\n        isNeg = x.s < 0,\r\n        intDigits = isNeg ? intPart.slice(1) : intPart,\r\n        len = intDigits.length;\r\n\r\n      if (g2) {\r\n        i = g1;\r\n        g1 = g2;\r\n        g2 = i;\r\n        len -= i;\r\n      }\r\n\r\n      if (g1 > 0 && len > 0) {\r\n        i = len % g1 || g1;\r\n        intPart = intDigits.substr(0, i);\r\n        for (; i < len; i += g1) intPart += groupSeparator + intDigits.substr(i, g1);\r\n        if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);\r\n        if (isNeg) intPart = '-' + intPart;\r\n      }\r\n\r\n      str = fractionPart\r\n       ? intPart + (format.decimalSeparator || '') + ((g2 = +format.fractionGroupSize)\r\n        ? fractionPart.replace(new RegExp('\\\\d{' + g2 + '}\\\\B', 'g'),\r\n         '$&' + (format.fractionGroupSeparator || ''))\r\n        : fractionPart)\r\n       : intPart;\r\n    }\r\n\r\n    return (format.prefix || '') + str + (format.suffix || '');\r\n  };\r\n\r\n\r\n  /*\r\n   * Return an array of two BigNumbers representing the value of this BigNumber as a simple\r\n   * fraction with an integer numerator and an integer denominator.\r\n   * The denominator will be a positive non-zero value less than or equal to the specified\r\n   * maximum denominator. If a maximum denominator is not specified, the denominator will be\r\n   * the lowest value necessary to represent the number exactly.\r\n   *\r\n   * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.\r\n   *\r\n   * '[BigNumber Error] Argument {not an integer|out of range} : {md}'\r\n   */\r\n  P.toFraction = function (md) {\r\n    var d, d0, d1, d2, e, exp, n, n0, n1, q, r, s,\r\n      x = this,\r\n      xc = x.c;\r\n\r\n    if (md != null) {\r\n      n = new BigNumber(md);\r\n\r\n      // Throw if md is less than one or is not an integer, unless it is Infinity.\r\n      if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {\r\n        throw Error\r\n          (bignumberError + 'Argument ' +\r\n            (n.isInteger() ? 'out of range: ' : 'not an integer: ') + valueOf(n));\r\n      }\r\n    }\r\n\r\n    if (!xc) return new BigNumber(x);\r\n\r\n    d = new BigNumber(ONE);\r\n    n1 = d0 = new BigNumber(ONE);\r\n    d1 = n0 = new BigNumber(ONE);\r\n    s = coeffToString(xc);\r\n\r\n    // Determine initial denominator.\r\n    // d is a power of 10 and the minimum max denominator that specifies the value exactly.\r\n    e = d.e = s.length - x.e - 1;\r\n    d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];\r\n    md = !md || n.comparedTo(d) > 0 ? (e > 0 ? d : n1) : n;\r\n\r\n    exp = MAX_EXP;\r\n    MAX_EXP = 1 / 0;\r\n    n = new BigNumber(s);\r\n\r\n    // n0 = d1 = 0\r\n    n0.c[0] = 0;\r\n\r\n    for (; ;)  {\r\n      q = div(n, d, 0, 1);\r\n      d2 = d0.plus(q.times(d1));\r\n      if (d2.comparedTo(md) == 1) break;\r\n      d0 = d1;\r\n      d1 = d2;\r\n      n1 = n0.plus(q.times(d2 = n1));\r\n      n0 = d2;\r\n      d = n.minus(q.times(d2 = d));\r\n      n = d2;\r\n    }\r\n\r\n    d2 = div(md.minus(d0), d1, 0, 1);\r\n    n0 = n0.plus(d2.times(n1));\r\n    d0 = d0.plus(d2.times(d1));\r\n    n0.s = n1.s = x.s;\r\n    e = e * 2;\r\n\r\n    // Determine which fraction is closer to x, n0/d0 or n1/d1\r\n    r = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(\r\n        div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1 ? [n1, d1] : [n0, d0];\r\n\r\n    MAX_EXP = exp;\r\n\r\n    return r;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return the value of this BigNumber converted to a number primitive.\r\n   */\r\n  P.toNumber = function () {\r\n    return +valueOf(this);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this BigNumber rounded to sd significant digits\r\n   * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits\r\n   * necessary to represent the integer part of the value in fixed-point notation, then use\r\n   * exponential notation.\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n   */\r\n  P.toPrecision = function (sd, rm) {\r\n    if (sd != null) intCheck(sd, 1, MAX);\r\n    return format(this, sd, rm, 2);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this BigNumber in base b, or base 10 if b is\r\n   * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and\r\n   * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent\r\n   * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than\r\n   * TO_EXP_NEG, return exponential notation.\r\n   *\r\n   * [b] {number} Integer, 2 to ALPHABET.length inclusive.\r\n   *\r\n   * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n   */\r\n  P.toString = function (b) {\r\n    var str,\r\n      n = this,\r\n      s = n.s,\r\n      e = n.e;\r\n\r\n    // Infinity or NaN?\r\n    if (e === null) {\r\n      if (s) {\r\n        str = 'Infinity';\r\n        if (s < 0) str = '-' + str;\r\n      } else {\r\n        str = 'NaN';\r\n      }\r\n    } else {\r\n      if (b == null) {\r\n        str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n         ? toExponential(coeffToString(n.c), e)\r\n         : toFixedPoint(coeffToString(n.c), e, '0');\r\n      } else if (b === 10 && alphabetHasNormalDecimalDigits) {\r\n        n = round(new BigNumber(n), DECIMAL_PLACES + e + 1, ROUNDING_MODE);\r\n        str = toFixedPoint(coeffToString(n.c), n.e, '0');\r\n      } else {\r\n        intCheck(b, 2, ALPHABET.length, 'Base');\r\n        str = convertBase(toFixedPoint(coeffToString(n.c), e, '0'), 10, b, s, true);\r\n      }\r\n\r\n      if (s < 0 && n.c[0]) str = '-' + str;\r\n    }\r\n\r\n    return str;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return as toString, but do not accept a base argument, and include the minus sign for\r\n   * negative zero.\r\n   */\r\n  P.valueOf = P.toJSON = function () {\r\n    return valueOf(this);\r\n  };\r\n\r\n\r\n  P._isBigNumber = true;\r\n\r\n  P[Symbol.toStringTag] = 'BigNumber';\r\n\r\n  // Node.js v10.12.0+\r\n  P[Symbol.for('nodejs.util.inspect.custom')] = P.valueOf;\r\n\r\n  if (configObject != null) BigNumber.set(configObject);\r\n\r\n  return BigNumber;\r\n}\r\n\r\n\r\n// PRIVATE HELPER FUNCTIONS\r\n\r\n// These functions don't need access to variables,\r\n// e.g. DECIMAL_PLACES, in the scope of the `clone` function above.\r\n\r\n\r\nfunction bitFloor(n) {\r\n  var i = n | 0;\r\n  return n > 0 || n === i ? i : i - 1;\r\n}\r\n\r\n\r\n// Return a coefficient array as a string of base 10 digits.\r\nfunction coeffToString(a) {\r\n  var s, z,\r\n    i = 1,\r\n    j = a.length,\r\n    r = a[0] + '';\r\n\r\n  for (; i < j;) {\r\n    s = a[i++] + '';\r\n    z = LOG_BASE - s.length;\r\n    for (; z--; s = '0' + s);\r\n    r += s;\r\n  }\r\n\r\n  // Determine trailing zeros.\r\n  for (j = r.length; r.charCodeAt(--j) === 48;);\r\n\r\n  return r.slice(0, j + 1 || 1);\r\n}\r\n\r\n\r\n// Compare the value of BigNumbers x and y.\r\nfunction compare(x, y) {\r\n  var a, b,\r\n    xc = x.c,\r\n    yc = y.c,\r\n    i = x.s,\r\n    j = y.s,\r\n    k = x.e,\r\n    l = y.e;\r\n\r\n  // Either NaN?\r\n  if (!i || !j) return null;\r\n\r\n  a = xc && !xc[0];\r\n  b = yc && !yc[0];\r\n\r\n  // Either zero?\r\n  if (a || b) return a ? b ? 0 : -j : i;\r\n\r\n  // Signs differ?\r\n  if (i != j) return i;\r\n\r\n  a = i < 0;\r\n  b = k == l;\r\n\r\n  // Either Infinity?\r\n  if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;\r\n\r\n  // Compare exponents.\r\n  if (!b) return k > l ^ a ? 1 : -1;\r\n\r\n  j = (k = xc.length) < (l = yc.length) ? k : l;\r\n\r\n  // Compare digit by digit.\r\n  for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;\r\n\r\n  // Compare lengths.\r\n  return k == l ? 0 : k > l ^ a ? 1 : -1;\r\n}\r\n\r\n\r\n/*\r\n * Check that n is a primitive number, an integer, and in range, otherwise throw.\r\n */\r\nfunction intCheck(n, min, max, name) {\r\n  if (n < min || n > max || n !== mathfloor(n)) {\r\n    throw Error\r\n     (bignumberError + (name || 'Argument') + (typeof n == 'number'\r\n       ? n < min || n > max ? ' out of range: ' : ' not an integer: '\r\n       : ' not a primitive number: ') + String(n));\r\n  }\r\n}\r\n\r\n\r\n// Assumes finite n.\r\nfunction isOdd(n) {\r\n  var k = n.c.length - 1;\r\n  return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;\r\n}\r\n\r\n\r\nfunction toExponential(str, e) {\r\n  return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) +\r\n   (e < 0 ? 'e' : 'e+') + e;\r\n}\r\n\r\n\r\nfunction toFixedPoint(str, e, z) {\r\n  var len, zs;\r\n\r\n  // Negative exponent?\r\n  if (e < 0) {\r\n\r\n    // Prepend zeros.\r\n    for (zs = z + '.'; ++e; zs += z);\r\n    str = zs + str;\r\n\r\n  // Positive exponent\r\n  } else {\r\n    len = str.length;\r\n\r\n    // Append zeros.\r\n    if (++e > len) {\r\n      for (zs = z, e -= len; --e; zs += z);\r\n      str += zs;\r\n    } else if (e < len) {\r\n      str = str.slice(0, e) + '.' + str.slice(e);\r\n    }\r\n  }\r\n\r\n  return str;\r\n}\r\n\r\n\r\n// EXPORT\r\n\r\n\r\nexport var BigNumber = clone();\r\n\r\nexport default BigNumber;\r\n", "/**\n * Original work Copyright (c) 2021 Burst Apps Team\n */\n\nimport BigNumber from 'bignumber.js';\n\n/**\n * Converts/Decodes a Base36 encoded string into hex string. UTF-8 is supported\n * Inverse function {@link convertHexStringToBase36String}\n * @param b36 The string to be decoded (either URI encoded or not)\n * @return {string} The hex representation of input string\n *\n * @category conversion\n */\nexport const convertBase36StringToHexString = (b36: string): string => {\n    return new BigNumber(b36, 36).toString(16);\n};\n", "/**\n *  base64.ts\n *\n *  Licensed under the BSD 3-Clause License.\n *    http://opensource.org/licenses/BSD-3-Clause\n *\n *  References:\n *    http://en.wikipedia.org/wiki/Base64\n *\n * @author Dan Kogai (https://github.com/dankogai)\n */\nconst version = '3.7.7';\n/**\n * @deprecated use lowercase `version`.\n */\nconst VERSION = version;\nconst _hasBuffer = typeof Buffer === 'function';\nconst _TD = typeof TextDecoder === 'function' ? new TextDecoder() : undefined;\nconst _TE = typeof TextEncoder === 'function' ? new TextEncoder() : undefined;\nconst b64ch = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\nconst b64chs = Array.prototype.slice.call(b64ch);\nconst b64tab = ((a) => {\n    let tab = {};\n    a.forEach((c, i) => tab[c] = i);\n    return tab;\n})(b64chs);\nconst b64re = /^(?:[A-Za-z\\d+\\/]{4})*?(?:[A-Za-z\\d+\\/]{2}(?:==)?|[A-Za-z\\d+\\/]{3}=?)?$/;\nconst _fromCC = String.fromCharCode.bind(String);\nconst _U8Afrom = typeof Uint8Array.from === 'function'\n    ? Uint8Array.from.bind(Uint8Array)\n    : (it) => new Uint8Array(Array.prototype.slice.call(it, 0));\nconst _mkUriSafe = (src) => src\n    .replace(/=/g, '').replace(/[+\\/]/g, (m0) => m0 == '+' ? '-' : '_');\nconst _tidyB64 = (s) => s.replace(/[^A-Za-z0-9\\+\\/]/g, '');\n/**\n * polyfill version of `btoa`\n */\nconst btoaPolyfill = (bin) => {\n    // console.log('polyfilled');\n    let u32, c0, c1, c2, asc = '';\n    const pad = bin.length % 3;\n    for (let i = 0; i < bin.length;) {\n        if ((c0 = bin.charCodeAt(i++)) > 255 ||\n            (c1 = bin.charCodeAt(i++)) > 255 ||\n            (c2 = bin.charCodeAt(i++)) > 255)\n            throw new TypeError('invalid character found');\n        u32 = (c0 << 16) | (c1 << 8) | c2;\n        asc += b64chs[u32 >> 18 & 63]\n            + b64chs[u32 >> 12 & 63]\n            + b64chs[u32 >> 6 & 63]\n            + b64chs[u32 & 63];\n    }\n    return pad ? asc.slice(0, pad - 3) + \"===\".substring(pad) : asc;\n};\n/**\n * does what `window.btoa` of web browsers do.\n * @param {String} bin binary string\n * @returns {string} Base64-encoded string\n */\nconst _btoa = typeof btoa === 'function' ? (bin) => btoa(bin)\n    : _hasBuffer ? (bin) => Buffer.from(bin, 'binary').toString('base64')\n        : btoaPolyfill;\nconst _fromUint8Array = _hasBuffer\n    ? (u8a) => Buffer.from(u8a).toString('base64')\n    : (u8a) => {\n        // cf. https://stackoverflow.com/questions/12710001/how-to-convert-uint8-array-to-base64-encoded-string/12713326#12713326\n        const maxargs = 0x1000;\n        let strs = [];\n        for (let i = 0, l = u8a.length; i < l; i += maxargs) {\n            strs.push(_fromCC.apply(null, u8a.subarray(i, i + maxargs)));\n        }\n        return _btoa(strs.join(''));\n    };\n/**\n * converts a Uint8Array to a Base64 string.\n * @param {boolean} [urlsafe] URL-and-filename-safe a la RFC4648 \u00A75\n * @returns {string} Base64 string\n */\nconst fromUint8Array = (u8a, urlsafe = false) => urlsafe ? _mkUriSafe(_fromUint8Array(u8a)) : _fromUint8Array(u8a);\n// This trick is found broken https://github.com/dankogai/js-base64/issues/130\n// const utob = (src: string) => unescape(encodeURIComponent(src));\n// reverting good old fationed regexp\nconst cb_utob = (c) => {\n    if (c.length < 2) {\n        var cc = c.charCodeAt(0);\n        return cc < 0x80 ? c\n            : cc < 0x800 ? (_fromCC(0xc0 | (cc >>> 6))\n                + _fromCC(0x80 | (cc & 0x3f)))\n                : (_fromCC(0xe0 | ((cc >>> 12) & 0x0f))\n                    + _fromCC(0x80 | ((cc >>> 6) & 0x3f))\n                    + _fromCC(0x80 | (cc & 0x3f)));\n    }\n    else {\n        var cc = 0x10000\n            + (c.charCodeAt(0) - 0xD800) * 0x400\n            + (c.charCodeAt(1) - 0xDC00);\n        return (_fromCC(0xf0 | ((cc >>> 18) & 0x07))\n            + _fromCC(0x80 | ((cc >>> 12) & 0x3f))\n            + _fromCC(0x80 | ((cc >>> 6) & 0x3f))\n            + _fromCC(0x80 | (cc & 0x3f)));\n    }\n};\nconst re_utob = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFFF]|[^\\x00-\\x7F]/g;\n/**\n * @deprecated should have been internal use only.\n * @param {string} src UTF-8 string\n * @returns {string} UTF-16 string\n */\nconst utob = (u) => u.replace(re_utob, cb_utob);\n//\nconst _encode = _hasBuffer\n    ? (s) => Buffer.from(s, 'utf8').toString('base64')\n    : _TE\n        ? (s) => _fromUint8Array(_TE.encode(s))\n        : (s) => _btoa(utob(s));\n/**\n * converts a UTF-8-encoded string to a Base64 string.\n * @param {boolean} [urlsafe] if `true` make the result URL-safe\n * @returns {string} Base64 string\n */\nconst encode = (src, urlsafe = false) => urlsafe\n    ? _mkUriSafe(_encode(src))\n    : _encode(src);\n/**\n * converts a UTF-8-encoded string to URL-safe Base64 RFC4648 \u00A75.\n * @returns {string} Base64 string\n */\nconst encodeURI = (src) => encode(src, true);\n// This trick is found broken https://github.com/dankogai/js-base64/issues/130\n// const btou = (src: string) => decodeURIComponent(escape(src));\n// reverting good old fationed regexp\nconst re_btou = /[\\xC0-\\xDF][\\x80-\\xBF]|[\\xE0-\\xEF][\\x80-\\xBF]{2}|[\\xF0-\\xF7][\\x80-\\xBF]{3}/g;\nconst cb_btou = (cccc) => {\n    switch (cccc.length) {\n        case 4:\n            var cp = ((0x07 & cccc.charCodeAt(0)) << 18)\n                | ((0x3f & cccc.charCodeAt(1)) << 12)\n                | ((0x3f & cccc.charCodeAt(2)) << 6)\n                | (0x3f & cccc.charCodeAt(3)), offset = cp - 0x10000;\n            return (_fromCC((offset >>> 10) + 0xD800)\n                + _fromCC((offset & 0x3FF) + 0xDC00));\n        case 3:\n            return _fromCC(((0x0f & cccc.charCodeAt(0)) << 12)\n                | ((0x3f & cccc.charCodeAt(1)) << 6)\n                | (0x3f & cccc.charCodeAt(2)));\n        default:\n            return _fromCC(((0x1f & cccc.charCodeAt(0)) << 6)\n                | (0x3f & cccc.charCodeAt(1)));\n    }\n};\n/**\n * @deprecated should have been internal use only.\n * @param {string} src UTF-16 string\n * @returns {string} UTF-8 string\n */\nconst btou = (b) => b.replace(re_btou, cb_btou);\n/**\n * polyfill version of `atob`\n */\nconst atobPolyfill = (asc) => {\n    // console.log('polyfilled');\n    asc = asc.replace(/\\s+/g, '');\n    if (!b64re.test(asc))\n        throw new TypeError('malformed base64.');\n    asc += '=='.slice(2 - (asc.length & 3));\n    let u24, bin = '', r1, r2;\n    for (let i = 0; i < asc.length;) {\n        u24 = b64tab[asc.charAt(i++)] << 18\n            | b64tab[asc.charAt(i++)] << 12\n            | (r1 = b64tab[asc.charAt(i++)]) << 6\n            | (r2 = b64tab[asc.charAt(i++)]);\n        bin += r1 === 64 ? _fromCC(u24 >> 16 & 255)\n            : r2 === 64 ? _fromCC(u24 >> 16 & 255, u24 >> 8 & 255)\n                : _fromCC(u24 >> 16 & 255, u24 >> 8 & 255, u24 & 255);\n    }\n    return bin;\n};\n/**\n * does what `window.atob` of web browsers do.\n * @param {String} asc Base64-encoded string\n * @returns {string} binary string\n */\nconst _atob = typeof atob === 'function' ? (asc) => atob(_tidyB64(asc))\n    : _hasBuffer ? (asc) => Buffer.from(asc, 'base64').toString('binary')\n        : atobPolyfill;\n//\nconst _toUint8Array = _hasBuffer\n    ? (a) => _U8Afrom(Buffer.from(a, 'base64'))\n    : (a) => _U8Afrom(_atob(a).split('').map(c => c.charCodeAt(0)));\n/**\n * converts a Base64 string to a Uint8Array.\n */\nconst toUint8Array = (a) => _toUint8Array(_unURI(a));\n//\nconst _decode = _hasBuffer\n    ? (a) => Buffer.from(a, 'base64').toString('utf8')\n    : _TD\n        ? (a) => _TD.decode(_toUint8Array(a))\n        : (a) => btou(_atob(a));\nconst _unURI = (a) => _tidyB64(a.replace(/[-_]/g, (m0) => m0 == '-' ? '+' : '/'));\n/**\n * converts a Base64 string to a UTF-8 string.\n * @param {String} src Base64 string.  Both normal and URL-safe are supported\n * @returns {string} UTF-8 string\n */\nconst decode = (src) => _decode(_unURI(src));\n/**\n * check if a value is a valid Base64 string\n * @param {String} src a value to check\n  */\nconst isValid = (src) => {\n    if (typeof src !== 'string')\n        return false;\n    const s = src.replace(/\\s+/g, '').replace(/={0,2}$/, '');\n    return !/[^\\s0-9a-zA-Z\\+/]/.test(s) || !/[^\\s0-9a-zA-Z\\-_]/.test(s);\n};\n//\nconst _noEnum = (v) => {\n    return {\n        value: v, enumerable: false, writable: true, configurable: true\n    };\n};\n/**\n * extend String.prototype with relevant methods\n */\nconst extendString = function () {\n    const _add = (name, body) => Object.defineProperty(String.prototype, name, _noEnum(body));\n    _add('fromBase64', function () { return decode(this); });\n    _add('toBase64', function (urlsafe) { return encode(this, urlsafe); });\n    _add('toBase64URI', function () { return encode(this, true); });\n    _add('toBase64URL', function () { return encode(this, true); });\n    _add('toUint8Array', function () { return toUint8Array(this); });\n};\n/**\n * extend Uint8Array.prototype with relevant methods\n */\nconst extendUint8Array = function () {\n    const _add = (name, body) => Object.defineProperty(Uint8Array.prototype, name, _noEnum(body));\n    _add('toBase64', function (urlsafe) { return fromUint8Array(this, urlsafe); });\n    _add('toBase64URI', function () { return fromUint8Array(this, true); });\n    _add('toBase64URL', function () { return fromUint8Array(this, true); });\n};\n/**\n * extend Builtin prototypes with relevant methods\n */\nconst extendBuiltins = () => {\n    extendString();\n    extendUint8Array();\n};\nconst gBase64 = {\n    version: version,\n    VERSION: VERSION,\n    atob: _atob,\n    atobPolyfill: atobPolyfill,\n    btoa: _btoa,\n    btoaPolyfill: btoaPolyfill,\n    fromBase64: decode,\n    toBase64: encode,\n    encode: encode,\n    encodeURI: encodeURI,\n    encodeURL: encodeURI,\n    utob: utob,\n    btou: btou,\n    decode: decode,\n    isValid: isValid,\n    fromUint8Array: fromUint8Array,\n    toUint8Array: toUint8Array,\n    extendString: extendString,\n    extendUint8Array: extendUint8Array,\n    extendBuiltins: extendBuiltins\n};\n// makecjs:CUT //\nexport { version };\nexport { VERSION };\nexport { _atob as atob };\nexport { atobPolyfill };\nexport { _btoa as btoa };\nexport { btoaPolyfill };\nexport { decode as fromBase64 };\nexport { encode as toBase64 };\nexport { utob };\nexport { encode };\nexport { encodeURI };\nexport { encodeURI as encodeURL };\nexport { btou };\nexport { decode };\nexport { isValid };\nexport { fromUint8Array };\nexport { toUint8Array };\nexport { extendString };\nexport { extendUint8Array };\nexport { extendBuiltins };\n// and finally,\nexport { gBase64 as Base64 };\n", "/**\n * Original work Copyright (c) 2018 PoC-Consortium\n * Modified work Copyright (c) 2019 Burst Apps Team\n */\n\nimport {Base64} from 'js-base64';\n\n/**\n * Converts/Decodes a Base64 encoded string to string. UTF-8 is supported\n * Inverse function {@link convertStringToBase64String}\n * @param b64 The string to be decoded (either URI encoded or not)\n * @return {string} The original string\n *\n * @category conversion\n */\nexport const convertBase64StringToString = (b64: string): string => {\n    return Base64.decode(b64);\n};\n", "/**\n * Original work Copyright (c) 2018 PoC-Consortium\n * Modified work Copyright (c) 2019 Burst Apps Team\n */\n\n/**\n * Converts byte array to hexadecimal string\n * Inverse operation of {@link convertHexStringToByteArray}\n * @param bytes The (unsigned) byte array to be converted\n * @param uppercase If _true_, converts hex string with uppercase characters (Default: false)\n * @return {string} A hex string representing the byte array input\n *\n * @category conversion\n */\nexport const convertByteArrayToHexString = (bytes: Uint8Array, uppercase = false): string => {\n    const hex = [];\n    for (const byte of bytes) {\n        hex.push((byte >>> 4).toString(16));\n        hex.push((byte & 0xF).toString(16));\n    }\n    return uppercase ? hex.join('').toUpperCase() : hex.join('');\n};\n", "/**\n * Original work Copyright (c) 2018 PoC-Consortium\n * Modified work Copyright (c) 2019 Burst Apps Team\n */\n\n/**\n * Converts a byte array into string\n * Inverse function {@link convertStringToByteArray}\n * @param byteArray The byte array to be converted\n * @param startIndex The starting index of array to be converted (Default: 0)\n * @param length The number of bytes to be considered, _iff_ startIndex is given. If _null_ the byte array's length is considered\n * @return {string} The converted string\n *\n * @category conversion\n */\nexport const convertByteArrayToString = (byteArray: Uint8Array, startIndex: number = 0, length: number = null): string => {\n    if (length === 0) {\n        return '';\n    }\n\n    let bytes = byteArray;\n    if (startIndex !== 0) {\n        const len = length === null ? byteArray.length - startIndex : length;\n        checkBytesToIntInput(bytes, len, startIndex);\n        bytes = byteArray.slice(startIndex, startIndex + len);\n    }\n\n    const escapedUTF8 = escape(String.fromCharCode.apply(null, Array.from(bytes)));\n    try {\n        return decodeURIComponent(escapedUTF8)\n    } catch (e) {\n        throw new Error('Error decoding utf-8 data');\n    }\n};\n\n\nfunction checkBytesToIntInput(bytes: Uint8Array, numBytes: number, startIndex: number = 0) {\n    if (startIndex < 0) {\n        throw new Error('Start index should not be negative');\n    }\n\n    if (bytes.length < startIndex + numBytes) {\n        throw new Error('Need at least ' + (numBytes) + ' bytes to convert to an integer');\n    }\n    return startIndex;\n}\n", "/** @ignore */\n/** @internal */\n/**  */\n\n// https://github.com/uxitten/polyfill/blob/master/string.polyfill.js\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/padStart\n\n// @ts-ignore\nif (!String.prototype.padStart) {\n    // @ts-ignore\n    String.prototype.padStart = function padStart(targetLength, padString) {\n        targetLength = targetLength >> 0;\n        padString = String(padString !== undefined ? padString : ' ');\n        if (this.length >= targetLength) {\n            return String(this);\n        } else {\n            targetLength = targetLength - this.length;\n            if (targetLength > padString.length) {\n                padString += padString.repeat(targetLength / padString.length);\n            }\n            return padString.slice(0, targetLength) + String(this);\n        }\n    };\n}\n", "/** @ignore */\n/** @internal */\n/**  */\nimport BigNumber from 'bignumber.js';\n\nexport const twosComplementBinary = (bn: BigNumber) => {\n    // we manually implement our own two's complement (flip bits, add one)\n    let bin = bn.multipliedBy(-1).toString(2);\n    while (bin.length % 8) {\n        bin = '0' + bin;\n    }\n    const prefix = ('1' === bin[0] && -1 !== bin.slice(1).indexOf('1')) ? '11111111' : '';\n    bin = bin.split('').map(i => '0' === i ? '1' : '0').join('');\n    return new BigNumber(prefix + bin, 2).plus(1);\n};\n", "/**\n Original work Copyright (c) 2020 Burst Apps Team\n */\nimport './internal/padStartPolyfill';\nimport BigNumber from 'bignumber.js';\nimport {twosComplementBinary} from './internal/twosComplementBinary';\n\n\n\n/**\n * Arbitrary length decimal to hexadecimal conversion\n *\n * >  Negative numbers are expressed as Two's Complement (https://en.wikipedia.org/wiki/Two%27s_complement)\n *\n * Credits to AJ ONeal for the two's complements stuff\n * https://coolaj86.com/articles/convert-decimal-to-hex-with-js-bigints/\n *\n * @param decimal A decimal string or BigNumber representation\n * @param padding If set the hex string will be padded to given number, 8 or 16 or more\n * @return A hexadecimal string\n *\n * @category conversion\n */\nexport const convertDecStringToHexString = (decimal: BigNumber | string, padding: number = 2 ): string => {\n    let bn = typeof decimal === 'string' ? new BigNumber(decimal) : decimal;\n\n    if (bn.isNaN()) {\n        throw new Error(`Invalid decimal argument: [${decimal}] - Expected a valid decimal value`);\n    }\n\n    if (padding < 0) {\n        throw new Error(`Invalid padding argument: [${padding}] - Expected a positive value`);\n    }\n\n    const isNegative = bn.lt(0);\n    if (isNegative) {\n        bn = twosComplementBinary(bn);\n    }\n    const hex = bn.toString(16);\n    const padSize = Math.ceil(hex.length / padding);\n    // @ts-ignore\n    return hex.padStart(padSize * padding, isNegative ? 'f' : '0');\n};\n", "/**\n * Original work Copyright (c) 2018 PoC-Consortium\n * Modified work Copyright (c) 2019 Burst Apps Team\n */\n\n/**\n * Toggles the endianess of a hex string.\n * `0xBEEF` > `0xEFBE`\n * If string is little Endianess it turns into Big Endianess, and vice versa\n *\n * > This method is mainly used for Smart Contract messaging and data inspection\n *\n * @param hexString The hex string to be converted\n * @return The converted string as hex string\n *\n * @category conversion\n */\nexport const convertHexEndianess = (hexString): string => {\n    let result = '';\n    const rawData = hexString;\n    for (let i = rawData.length - 1; i >= 0; i -= 2) {\n        result += rawData[i - 1] + rawData[i];\n    }\n    return result;\n};\n", "/**\n Original work Copyright (c) 2021 Burst Apps Team\n */\n\nimport BigNumber from 'bignumber.js';\n\n/**\n * Converts/Decodes a Hex encoded string into Base36 string. UTF-8 is supported\n * Inverse function {@link convertBase36StringToHexString}\n * @param hex The string to be decoded (either URI encoded or not)\n * @return {string} The hex representation of input string\n *\n * @category conversion\n */\nexport  const convertHexStringToBase36String = (hex: string): string => {\n    return new BigNumber(hex, 16).toString(36);\n};\n", "/**\n * Original work Copyright (c) 2018 PoC-Consortium\n * Modified work Copyright (c) 2019 Burst Apps Team\n */\n\n/**\n * Converts an hexadecimal string to byte array\n * @param hex The hexadecimal string to be converted\n * @return {number[]} An byte array representing the hexadecimal input\n *\n * @category conversion\n */\nexport const convertHexStringToByteArray = (hex: string): Uint8Array => {\n    if (hex.length % 2) {\n        throw new Error(`Invalid Hex String: ${hex}`);\n    }\n\n    const bytes = new Uint8Array(hex.length / 2);\n    for (let c = 0; c < hex.length; c += 2) {\n        const byte = parseInt(hex.substr(c, 2), 16);\n        if (Number.isNaN(byte)) {\n            throw new Error(`Invalid Hex String: ${hex}`);\n        }\n        bytes[c / 2] = byte;\n    }\n\n    return bytes;\n};\n", "/**\n Original work Copyright (c) 2019 Burst Apps Team\n */\n\n/**\n * Arbitrary length hexadecimal to decimal conversion\n * https://stackoverflow.com/questions/21667377/javascript-hexadecimal-string-to-decimal-string\n * @param hexStr A hexadecimal string\n * @return A decimal string\n *\n * @category conversion\n */\nexport const convertHexStringToDecString = (hexStr: string): string => {\n    const digits = [0];\n    let i, j, carry;\n    for (i = 0; i < hexStr.length; i += 1) {\n        carry = parseInt(hexStr.charAt(i), 16);\n        for (j = 0; j < digits.length; j += 1) {\n            digits[j] = digits[j] * 16 + carry;\n            // tslint:disable-next-line:no-bitwise\n            carry = digits[j] / 10 | 0;\n            digits[j] %= 10;\n        }\n        while (carry > 0) {\n            digits.push(carry % 10);\n            // tslint:disable-next-line:no-bitwise\n            carry = carry / 10 | 0;\n        }\n    }\n    return digits.reverse().join('');\n};\n", "/**\n * Original work Copyright (c) 2018 PoC-Consortium\n * Modified work Copyright (c) 2019 Burst Apps Team\n */\n\nimport {convertByteArrayToString} from './convertByteArrayToString';\nimport {convertHexStringToByteArray} from './convertHexStringToByteArray';\n\n/**\n * Converts a Hexadecimally encoded string into String\n * Inverse function {@link convertStringToHexString}\n * @param hex The Hex string to be converted\n * @return {string} The string represented by the Hex String\n *\n * @category conversion\n */\nexport const convertHexStringToString = (hex: string): string => {\n    return convertByteArrayToString(convertHexStringToByteArray(hex));\n};\n", "/**\n * Original work Copyright (c) 2018 PoC-Consortium\n * Modified work Copyright (c) 2019 Burst Apps Team\n */\n\n// FIXME: This implementation has security warnings!\nimport {Base64} from 'js-base64';\n\n/**\n * Converts/Encodes a String into Base64 (URI) encoded string. UTF-8 is supported.\n * Inverse function {@link convertBase64StringToString}\n * @param str The string to be converted\n * @param isURICompatible Determine whether the resulting string shall be URI compatible, or not. Default is `true`\n * @return {string} The Base64 String representing the input string. The string is already URI encoded, i.e. can be used directly in browsers\n *\n * @category conversion\n */\nexport const convertStringToBase64String = (str: string, isURICompatible = true): string => {\n    return isURICompatible ? Base64.encodeURI(str) : Base64.encode(str);\n};\n", "/**\n * Original work Copyright (c) 2018 PoC-Consortium\n * Modified work Copyright (c) 2019 Burst Apps Team\n */\n\n/**\n * Converts a string into byte array\n * Inverse function {@link convertByteArrayToString}\n * @param str The string  to be converted\n * @return {number[]} A byte array representing the string input\n *\n * @category conversion\n */\nexport const convertStringToByteArray = (str: string): Uint8Array => {\n    const s = unescape(encodeURIComponent(str));\n    const bytes = new Uint8Array(s.length);\n    for (let i = 0; i < s.length; ++i) {\n        bytes[i] = s.charCodeAt(i);\n    }\n\n    return bytes;\n};\n", "/**\n * Original work Copyright (c) 2018 PoC-Consortium\n * Modified work Copyright (c) 2019 Burst Apps Team\n */\n\nimport {convertStringToByteArray} from './convertStringToByteArray';\nimport {convertByteArrayToHexString} from './convertByteArrayToHexString';\n\n/**\n * Converts/Encode a String into Hexadecimally encoded\n * Inverse function {@link convertHexStringToString}\n * @param str The Hex string to be converted\n * @return {string} The Hex String representing the input string\n *\n * @category conversion\n */\nexport const convertStringToHexString = (str: string): string => {\n    return convertByteArrayToHexString(convertStringToByteArray(str));\n};\n", "/**\n Original work Copyright (c) 2022 Signum Network\n */\nimport {Amount} from './amount';\n\n/**\n * Converts an Asset Price (priceNQT) into Planck returned in Trade and/or Order objects from node\n * @param assetPrice The priceNQT from asset queries\n * @param decimals The decimals of that asset\n *\n * @category conversion\n */\nexport function convertAssetPriceToPlanck(assetPrice: string, decimals: number): string {\n    // I'm \"abusing\" the Amount with its bignumber calculations here...Signa allows 8 decimals...\n    return Amount.fromSigna(assetPrice).multiply(10 ** (decimals - 8)).getPlanck();\n}\n", "/**\n Original work Copyright (c) 2022 Signum Network\n */\nimport {Amount} from './amount';\n\n/**\n * Converts planck into a `priceNQT` used by Node method `placeOrder`.\n *\n * Usually, you don't need this. {@link core.AssetApi.placeAskOrder} and {@link core.AssetApi.placeBidOrder} convert planck into\n * correct value already. This helper is just for those who interact with the Node Http API directly\n *\n * @see {@link convertAssetPriceToPlanck}\n *\n * @param planck the amount in planck per token\n * @param decimals the number of decimals for targeted asset\n * @return the Price in _planck per one token quantity_\n *\n * @category conversion\n */\nexport function convertPlanckToAssetPrice(planck: string, decimals: number): string {\n    return Amount.fromSigna(planck).divide(10 ** decimals).getSigna();\n}\n"],
  "mappings": "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",
  "names": ["require_bignumber", "__commonJSMin", "exports", "module", "globalObject", "BigNumber", "isNumeric", "mathceil", "mathfloor", "bignumberError", "tooManyDigits", "BASE", "LOG_BASE", "MAX_SAFE_INTEGER", "POWS_TEN", "SQRT_BASE", "MAX", "clone", "configObject", "div", "convertBase", "parseNumeric", "P", "ONE", "DECIMAL_PLACES", "ROUNDING_MODE", "TO_EXP_NEG", "TO_EXP_POS", "MIN_EXP", "MAX_EXP", "CRYPTO", "MODULO_MODE", "POW_PRECISION", "FORMAT", "ALPHABET", "alphabetHasNormalDecimalDigits", "v", "b", "alphabet", "c", "caseChanged", "e", "i", "isNum", "len", "str", "x", "intCheck", "round", "obj", "p", "n", "s", "out", "maxOrMin", "pow2_53", "random53bitInt", "dp", "a", "k", "rand", "args", "sum", "decimal", "toBaseOut", "baseIn", "baseOut", "j", "arr", "arrL", "sign", "callerIsToString", "r", "xc", "y", "rm", "toFixedPoint", "coeffToString", "multiply", "base", "m", "temp", "xlo", "xhi", "carry", "klo", "khi", "compare", "aL", "bL", "cmp", "subtract", "more", "prod", "prodL", "q", "qc", "rem", "remL", "rem0", "xi", "xL", "yc0", "yL", "yz", "yc", "bitFloor", "format", "id", "c0", "ne", "toExponential", "normalise", "basePrefix", "dotAfter", "dotBefore", "isInfinityOrNaN", "whitespaceOrPlus", "p1", "p2", "sd", "d", "ni", "rd", "pows10", "valueOf", "half", "isModExp", "nIsBig", "nIsNeg", "nIsOdd", "isOdd", "t", "xLTy", "xe", "ye", "xcL", "ycL", "ylo", "yhi", "zc", "sqrtBase", "rep", "g1", "g2", "groupSeparator", "intPart", "fractionPart", "isNeg", "intDigits", "md", "d0", "d1", "d2", "exp", "n0", "n1", "z", "l", "min", "max", "name", "zs", "bignumber_js_1", "__importDefault", "FormatDotDecimal", "FormatCommaDecimal", "exports", "assureValidValue", "v", "ChainValue", "_ChainValue", "decimals", "a", "c", "value", "chainValue", "prefix", "format", "newValue", "constants_exports", "__export", "CurrencySymbol", "FeeQuantPlanck", "OneSignaPlanck", "init_constants", "__esmMin", "constants_1", "chainValue_1", "exports", "Amount", "_Amount", "planck", "signa", "b", "p", "amount", "value", "format", "src_exports", "__export", "ChainTime", "CurrencySymbol", "FeeQuantPlanck", "OneSignaPlanck", "asyncRetry", "convertAssetPriceToPlanck", "convertBase36StringToHexString", "convertBase64StringToString", "convertByteArrayToHexString", "convertByteArrayToString", "convertDecStringToHexString", "convertHexEndianess", "convertHexStringToBase36String", "convertHexStringToByteArray", "convertHexStringToDecString", "convertHexStringToString", "convertPlanckToAssetPrice", "convertStringToBase64String", "convertStringToByteArray", "convertStringToHexString", "asyncRetry", "args", "asyncFn", "onFailureAsync", "retryCount", "maxRetrials", "e", "GenesisBlockTime", "ChainTime", "_ChainTime", "blockTimestamp", "timestamp", "date", "blockTime", "chainTime", "__reExport", "src_exports", "init_constants", "isNumeric", "mathceil", "mathfloor", "bignumberError", "tooManyDigits", "BASE", "LOG_BASE", "MAX_SAFE_INTEGER", "POWS_TEN", "SQRT_BASE", "MAX", "clone", "configObject", "div", "convertBase", "parseNumeric", "P", "BigNumber", "ONE", "DECIMAL_PLACES", "ROUNDING_MODE", "TO_EXP_NEG", "TO_EXP_POS", "MIN_EXP", "MAX_EXP", "CRYPTO", "MODULO_MODE", "POW_PRECISION", "FORMAT", "ALPHABET", "alphabetHasNormalDecimalDigits", "v", "b", "alphabet", "c", "caseChanged", "e", "i", "isNum", "len", "str", "intCheck", "round", "obj", "p", "n", "s", "out", "maxOrMin", "pow2_53", "random53bitInt", "dp", "a", "k", "rand", "args", "sum", "decimal", "toBaseOut", "baseIn", "baseOut", "j", "arr", "arrL", "sign", "callerIsToString", "d", "r", "x", "xc", "y", "rm", "toFixedPoint", "coeffToString", "multiply", "base", "m", "temp", "xlo", "xhi", "carry", "klo", "khi", "compare", "aL", "bL", "cmp", "subtract", "more", "prod", "prodL", "q", "qc", "rem", "remL", "rem0", "xi", "xL", "yc0", "yL", "yz", "yc", "bitFloor", "format", "id", "c0", "ne", "toExponential", "normalise", "basePrefix", "dotAfter", "dotBefore", "isInfinityOrNaN", "whitespaceOrPlus", "p1", "p2", "sd", "ni", "rd", "pows10", "valueOf", "half", "isModExp", "nIsBig", "nIsNeg", "nIsOdd", "isOdd", "t", "xLTy", "xe", "ye", "xcL", "ycL", "ylo", "yhi", "zc", "sqrtBase", "rep", "g1", "g2", "groupSeparator", "intPart", "fractionPart", "isNeg", "intDigits", "md", "d0", "d1", "d2", "exp", "n0", "n1", "z", "l", "min", "max", "name", "zs", "bignumber_default", "convertBase36StringToHexString", "b36", "bignumber_default", "version", "VERSION", "_hasBuffer", "_TD", "_TE", "b64ch", "b64chs", "b64tab", "a", "tab", "c", "i", "b64re", "_fromCC", "_U8Afrom", "it", "_mkUriSafe", "src", "m0", "_tidyB64", "s", "btoaPolyfill", "bin", "u32", "c0", "c1", "c2", "asc", "pad", "_btoa", "_fromUint8Array", "u8a", "strs", "l", "fromUint8Array", "urlsafe", "cb_utob", "cc", "re_utob", "utob", "u", "_encode", "encode", "encodeURI", "re_btou", "cb_btou", "cccc", "cp", "offset", "btou", "b", "atobPolyfill", "u24", "r1", "r2", "_atob", "_toUint8Array", "toUint8Array", "_unURI", "_decode", "decode", "isValid", "_noEnum", "v", "extendString", "_add", "name", "body", "extendUint8Array", "extendBuiltins", "gBase64", "convertBase64StringToString", "b64", "gBase64", "convertByteArrayToHexString", "bytes", "uppercase", "hex", "byte", "convertByteArrayToString", "byteArray", "startIndex", "length", "bytes", "len", "checkBytesToIntInput", "escapedUTF8", "numBytes", "targetLength", "padString", "twosComplementBinary", "bn", "bin", "prefix", "i", "bignumber_default", "convertDecStringToHexString", "decimal", "padding", "bn", "bignumber_default", "isNegative", "twosComplementBinary", "hex", "padSize", "convertHexEndianess", "hexString", "result", "rawData", "i", "convertHexStringToBase36String", "hex", "bignumber_default", "convertHexStringToByteArray", "hex", "bytes", "c", "byte", "convertHexStringToDecString", "hexStr", "digits", "i", "j", "carry", "convertHexStringToString", "hex", "convertByteArrayToString", "convertHexStringToByteArray", "convertStringToBase64String", "str", "isURICompatible", "gBase64", "convertStringToByteArray", "str", "s", "bytes", "i", "convertStringToHexString", "str", "convertByteArrayToHexString", "convertStringToByteArray", "import_amount", "convertAssetPriceToPlanck", "assetPrice", "decimals", "import_amount", "convertPlanckToAssetPrice", "planck", "decimals"]
}
